<?php

/**
 * @file
 * getlocations.module
 * @author Bob Hutchinson https://backdropcms.org/account/hutch
 * @copyright GNU GPL
 *
 * Displays locations on a map.
 * for Backdrop 1
 * using version 3 googlemaps API
 */

define('GETLOCATIONS_PATH', backdrop_get_path('module', 'getlocations'));
define('GETLOCATIONS_ADMIN_PATH', 'admin/config/services/getlocations');
define('GETLOCATIONS_VERSION', '1.x-1.x');
define('GETLOCATIONS_W3W_URL', 'https://api.what3words.com');

/**
 * Implements hook_help().
 */
function getlocations_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations':
      $output = '<p>' . t('Displays locations on a map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_init().
 */
/*
function getlocations_init() {
  if (module_exists('colorbox')) {
    $getlocations_colorbox = getlocations_colorbox_settings();
    if ($getlocations_colorbox['enable']) {
      $settings = array('getlocations_colorbox' => $getlocations_colorbox);
      backdrop_add_js($settings, 'setting');
      $getlocations_paths = getlocations_paths_get();
      backdrop_add_js($getlocations_paths['getlocations_colorbox_path']);
    }
  }
}
*/

/**
 * Implements hook_permission().
 */
function getlocations_permission() {
  $perms = array();
  $perms['access getlocations'] = array(
    'title' => t('Access Getlocations'),
    'description' => t('View and use the Getlocations module.')
  );
  $perms['access user getlocations'] = array(
    'title' => t('Access User locations'),
    'description' => t('View User locations with Getlocation maps.')
  );
  return $perms;
}

/**
 * Implements hook_flush_caches().
 */
function getlocations_flush_caches() {
  if (config_get('getlocations_flush', 1)) {
    getlocations_regenerate_markers();
  }
}

/**
 * Implements hook_views_api().
 */
function getlocations_views_api() {
  return array(
    'api' => 3,
    'path' => GETLOCATIONS_PATH . '/views',
  );
}

/**
 * Implements hook_config_info().
 */
function getlocations_config_info() {
  $info['getlocations.settings'] = array(
    'label' => t('Getlocations settings'),
    'group' => t('Configuration'),
  );
  $info['getlocations.map_providers'] = array(
    'label' => t('Getlocations map providers'),
    'group' => t('Configuration'),
  );
  $info['getlocations.paths'] = array(
    'label' => t('Getlocations paths'),
    'group' => t('Configuration'),
  );
  $info['getlocations.search_places_opts'] = array(
    'label' => t('Getlocations search places options'),
    'group' => t('Configuration'),
  );
  return $info;
}

/**
 * Implements hook_autoload_info().
 */
function getlocations_autoload_info() {
  return array(
    'getlocations_plugin_style_map' => 'views/getlocations_plugin_style_map.inc',
  );
}

/**
 * Implements hook_menu().
 */
function getlocations_menu() {
  $items = array();

  $items[GETLOCATIONS_ADMIN_PATH] = array(
    'title' => 'Getlocations',
    'description' => 'Configure Getlocations',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('getlocations_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'getlocations.admin.inc',
  );

  $items[GETLOCATIONS_ADMIN_PATH . '/base'] = array(
    'title' => 'Base',
    'description' => 'Getlocations base configuration',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('getlocations_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'getlocations.admin.inc',
    'weight' => 1,
  );

  // getlocations/node/$nid    # show all location on one node
  $items['getlocations/node/%getlocations_id'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_nodemap',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  if (getlocations_check_entity_type('user')) {
    // getlocations/user/$uid    # show all locations for a user
    $items['getlocations/user/%getlocations_id'] = array(
      'title' => 'Get user locations',
      'access callback' => 'getlocations_access_user_location',
      'page callback' => 'getlocations_usermap',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
    );
    // getlocations/users    # show all locations for all users
    $items['getlocations/users'] = array(
      'title' => 'View all user locations',
      'access callback' => 'getlocations_access_user_location',
      'page callback' => 'getlocations_usersmap',
      'type' => MENU_CALLBACK,
    );
  }

  if (module_exists('taxonomy')) {
    if (getlocations_check_entity_type('taxonomy_term')) {
      // getlocations/term/$tid    # show all locations for a term
      $items['getlocations/term/%getlocations_id'] = array(
        'title' => 'Get term locations',
        'access callback' => 'getlocations_access_location',
        'page callback' => 'getlocations_termmap',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
      );
    }
  }

  if (module_exists('comment')) {
    if (getlocations_check_entity_type('comment')) {
      // getlocations/comment/$cid    # show all locations for a comment
      $items['getlocations/comment/%getlocations_id'] = array(
        'title' => 'Get comment locations',
        'access callback' => 'getlocations_access_location',
        'page callback' => 'getlocations_commentmap',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
      );
    }
  }

  // getlocations/type/$type     # show all locations of nodes of content-type machine name
  $items['getlocations/type/%getlocations_type'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_typemap',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  // getlocations/lids/1,2,3,4    # show lids
  $items['getlocations/lids/%getlocations_cdints'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_lids',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  // getlocations/nids/1,2,3,4    # show nids locations
  $items['getlocations/nids/%getlocations_cdints'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_nids',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  // ajax callbacks
  // getlocations/info?lid     # ajax callback to fetch an address
  $items['getlocations_cb/info'] = array(
    'page callback' => 'getlocations_adinfo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // getlocations/lidinfo?lid    # ajax callback to fetch a link to the 'owner'
  $items['getlocations_cb/lidinfo'] = array(
    'page callback' => 'getlocations_lidinfo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['getlocations_box'] = array(
    'title' => 'Get locations',
    'access arguments' => array('access getlocations'),
    'page callback' => 'getlocations_box',
    'type' => MENU_CALLBACK,
  );
  $items['getlocations/markerinfo'] = array(
    'access callback' => TRUE,
    'page callback' => 'getlocations_markerinfo',
    'type' => MENU_CALLBACK,
  );
  $items['getlocations/cb_w3w'] = array(
    'access callback' => TRUE,
    'page callback' => 'getlocations_cb_w3w',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * check that the argument is numeric
 *
 * @param int $arg
 *
 * @return argument or FALSE
 */
function getlocations_id_load($arg) {
  return (is_numeric($arg) && $arg > 0 ? $arg : FALSE);
}

/**
 * Check that the node type exists
 *
 * @param string $arg Node type.
 *
 * @return argument or FALSE
 */
function getlocations_type_load($arg) {
  $query = db_select('node_type', 'n')->fields('n', array('type'))->condition('n.type', $arg);
  $row = $query->execute()->fetchAssoc();
  return ((isset($row['type']) && $row['type']) ? $arg : FALSE);
}

/**
 * sanity check on list of nids
 *
 * @param int $arg
 *
 * @return argument or FALSE
 *
 */
function getlocations_cdints_load($arg) {
  $arr = explode(',', $arg);
  foreach ($arr AS $a) {
    if (! is_numeric($a) || $a < 1 ) {
      return FALSE;
    }
  }
  return $arg;
}

/**
 * sanity check on entity type
 *
 * @param string $arg Entity type.
 *
 * @return argument or FALSE
 *
 */
function getlocations_entity_type_load($arg) {
  if (getlocations_check_entity_type($arg)) {
    return $arg;
  }
  return FALSE;
}

/**
 * Access callback: Checks for access permission and if there is a supported locative module installed
 *
 * @return bool
 *
 */
function getlocations_access_location() {
  if (user_access('access getlocations')) {
    $modules = getlocations_supported_modules();
    foreach ($modules AS $module) {
      if (module_exists($module)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Access callback: Checks for access permission and if there is a supported locative module installed
 *
 * @return bool
 *
 */
function getlocations_access_user_location() {
  if (user_access('access user getlocations') && user_access('access user profiles')) {
    $modules = getlocations_supported_modules();
    foreach ($modules AS $module) {
      if (module_exists($module)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Page callback: displays a map.
 *
 * @param int $nid
 *
 * @return
 *   Returns a map of locations of a node
 *
 */
function getlocations_nodemap($nid) {

  $vid = getlocations_get_vid($nid);
  $locations = getlocations_load_locations($vid);
  $node = node_load($nid);

  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['node_map_marker'];
  $typemarkers = getlocations_get_markertypes('node');
  if (isset($typemarkers[$node->type]) && $typemarkers[$node->type]) {
    $marker = $typemarkers[$node->type];
  }
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $ct = 0;
  $extra_info = array();
  $sv_info = FALSE;
  $map_info = FALSE;
  $module = getlocations_get_current_supported_module();

  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
        $ll = explode(',', $latlon);
        $location['latitude'] = $ll[0];
        $location['longitude'] = $ll[1];
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          if ($location['key'] == 'nid') {
            $location['lid'] = $nid;
          }
          elseif ($location['key'] == 'vid') {
            $location['lid'] = $nid;
          }
        }

        // term markers
        $marker = getlocations_get_term_marker($nid, $marker);

        // per location marker
        if (isset($location['marker']) && ! empty($location['marker'])) {
          $marker = $location['marker'];
        }
        $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($node->title), ENT_QUOTES);
        $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');

        $sv_info = FALSE;
        if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
            $sv_info = getlocations_fields_svinfo($location);
          }
          if (getlocations_fields_map_settings_allow()) {
            $map_info = getlocations_fields_mapinfo($location);
          }
        }

        $ct++;
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  backdrop_set_title(t('View !t locations', array('!t' => $node->title)));

  if ($sv_info) {
    $extra_info = array_merge($extra_info, $sv_info);
  }
  if ($map_info) {
    $extra_info = array_merge($extra_info, $map_info);
  }

  return getlocations_setlocations($latlons, $minmaxes, 'node', $node, $extra_info);

}

/**
 * Page callback: Displays a map.
 *
 * @param int $uid
 *
 * @return
 *   Returns a map of locations of a user
 *
 */
function getlocations_usermap($uid) {

  $getlocations_defaults = getlocations_defaults();

  $marker = $getlocations_defaults['user_map_marker'];
  $locations = getlocations_load_locations($uid, 'uid');
  $account = user_load($uid);
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $ct = 0;
  $extra_info = array();
  $sv_info = FALSE;
  $map_info = FALSE;
  $module = getlocations_get_current_supported_module();

  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
        $ll = explode(',', $latlon);
        $location['latitude'] = $ll[0];
        $location['longitude'] = $ll[1];
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          $location['lid'] = $uid;
        }
        // per location marker
        if (isset($location['marker']) && ! empty($location['marker'])) {
          $marker = $location['marker'];
        }
        $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($account->name), ENT_QUOTES);
        $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');

        $sv_info = FALSE;
        if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
            $sv_info = getlocations_fields_svinfo($location);
          }
          if (getlocations_fields_map_settings_allow()) {
            $map_info = getlocations_fields_mapinfo($location);
          }
        }

        $ct++;
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  backdrop_set_title(t('View user !t locations', array('!t' => $account->name)));

  if ($sv_info) {
    $extra_info = array_merge($extra_info, $sv_info);
  }
  if ($map_info) {
    $extra_info = array_merge($extra_info, $map_info);
  }

  return getlocations_setlocations($latlons, $minmaxes, 'user', $account, $extra_info);

}

/**
 * Page callback: Displays a map.
 *
 * @return
 *   Returns a map of locations of all the users
 *
 */
function getlocations_usersmap() {

  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['user_map_marker'];
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $query = db_select('users', 'u')->fields('u', array('uid', 'name'))->condition('u.status', 1);
  $rows = $query->execute();
  $ct = 0;
  foreach ($rows AS $row) {
    $uid = $row->uid;
    $locations = getlocations_load_locations($uid, 'uid');
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
          $ll = explode(',', $latlon);
          $location['latitude'] = $ll[0];
          $location['longitude'] = $ll[1];
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $uid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($row->name), ENT_QUOTES);
          $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');
          $ct++;
        }
      }
    }
  }

  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }
  return getlocations_setlocations($latlons, $minmaxes, 'users');

}

/**
 * Page callback: Displays a map.
 *
 * @param int $tid
 *
 * @return
 *   Returns a map of locations of a term
 *
 */
function getlocations_termmap($tid) {
  if (module_exists('taxonomy')) {
    $locations = getlocations_load_locations($tid, 'tid');
    $term = taxonomy_term_load($tid);
    $getlocations_defaults = getlocations_defaults();
    $marker = $getlocations_defaults['vocabulary_map_marker'];
    $typemarkers = getlocations_get_markertypes('vocabulary');
    if (isset($typemarkers[$term->vid]) && $typemarkers[$term->vid]) {
      $marker = $typemarkers[$term->vid];
    }
    $latlons = array();
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
    $ct = 0;
    $extra_info = array();
    $sv_info = FALSE;
    $map_info = FALSE;
    $module = getlocations_get_current_supported_module();

    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
          $ll = explode(',', $latlon);
          $location['latitude'] = $ll[0];
          $location['longitude'] = $ll[1];
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $tid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($term->name), ENT_QUOTES);
          $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');

          $sv_info = FALSE;
          if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
              $sv_info = getlocations_fields_svinfo($location);
            }
            if (getlocations_fields_map_settings_allow()) {
              $map_info = getlocations_fields_mapinfo($location);
            }
          }

          $ct++;
        }
      }
    }
    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }

    backdrop_set_title(t('View term !t locations', array('!t' => $term->name)));

    if ($sv_info) {
      $extra_info = array_merge($extra_info, $sv_info);
    }
    if ($map_info) {
      $extra_info = array_merge($extra_info, $map_info);
    }

    return getlocations_setlocations($latlons, $minmaxes, 'term', $term, $extra_info);

  }
}

/**
 * Page callback: Displays a map.
 *
 * @param int $cid
 *
 * @return
 *   Returns a map of locations of a comment
 *
 */
function getlocations_commentmap($cid) {
  if (module_exists('comment')) {
    $locations = getlocations_load_locations($cid, 'cid');
    $comment = comment_load($cid);
    $getlocations_defaults = getlocations_defaults();
    $marker = $getlocations_defaults['comment_map_marker'];
    $latlons = array();
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
    $ct = 0;
    $extra_info = array();
    $sv_info = FALSE;
    $map_info = FALSE;
    $module = getlocations_get_current_supported_module();

    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
          $ll = explode(',', $latlon);
          $location['latitude'] = $ll[0];
          $location['longitude'] = $ll[1];
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $cid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($comment->subject), ENT_QUOTES);
          $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');

          $sv_info = FALSE;
          if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
              $sv_info = getlocations_fields_svinfo($location);
            }
            if (getlocations_fields_map_settings_allow()) {
              $map_info = getlocations_fields_mapinfo($location);
            }
          }

          $ct++;
        }
      }
    }
    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }

    backdrop_set_title(t('View comment !t locations', array('!t' => $comment->subject)));

    if ($sv_info) {
      $extra_info = array_merge($extra_info, $sv_info);
    }
    if ($map_info) {
      $extra_info = array_merge($extra_info, $map_info);
    }

    return getlocations_setlocations($latlons, $minmaxes, 'comment', $comment, $extra_info);

  }
}

/**
 * Page callback: Displays a map.
 *
 * @param string $type
 * A location enabled content type
 *
 * @return
 *   Returns a map of locations of all nodes of content-type $type
 *
 */
function getlocations_typemap($type, $loc_key='', $loc_val = '') {
  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['node_map_marker'];
  $typemarkers = getlocations_get_markertypes('node');
  if (isset($typemarkers[$type]) && $typemarkers[$type]) {
    $marker = $typemarkers[$type];
  }

  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $query = db_select('node', 'n')->fields('n', array('nid', 'title'))->condition('n.type', $type);
  $rows = $query->execute();
  $ct = 0;
  $extra_info = array();
  $sv_info = FALSE;
  $map_info = FALSE;
  $module = getlocations_get_current_supported_module();

  foreach ($rows AS $row) {
    $nid = $row->nid;
    $vid = getlocations_get_vid($nid);
    $locations = getlocations_load_locations($vid);
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
          $ll = explode(',', $latlon);
          $location['latitude'] = $ll[0];
          $location['longitude'] = $ll[1];
          if ($loc_key && isset($location[$loc_key])) {
            if (backdrop_strtolower($location[$loc_key]) != backdrop_strtolower($loc_val)) {
              continue;
            }
          }
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            if ($location['key'] == 'nid') {
              $location['lid'] = $nid;
            }
            elseif ($location['key'] == 'vid') {
              $location['lid'] = $vid;
            }
          }

          // term markers
          $marker = getlocations_get_term_marker($nid, $marker);

          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($row->title), ENT_QUOTES);
          $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key'], '', '');

          $sv_info = FALSE;
          if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
              $sv_info = getlocations_fields_svinfo($location);
            }
            if (getlocations_fields_map_settings_allow()) {
              $map_info = getlocations_fields_mapinfo($location);
            }
          }

          $ct++;
        }
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  if ($sv_info) {
    $extra_info = array_merge($extra_info, $sv_info);
  }
  if ($map_info) {
    $extra_info = array_merge($extra_info, $map_info);
  }

  return getlocations_setlocations($latlons, $minmaxes, $type, '', $extra_info);
}

/**
 * Page callback: Displays a map.
 *
 * @param string $lidlist
 * A comma-delimited list of location ids
 *
 * @return
 *   Returns a map of locations.
 *
 */
function getlocations_lids($lidlist) {
  $lidarr = explode(',', $lidlist);
  $locations = array();
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $marker = '';
  $ct = 0;
  $extra_info = array();
  $sv_info = FALSE;
  $map_info = FALSE;
  $module = getlocations_get_current_supported_module();

  foreach ($lidarr AS $lid) {
    $locations[] = getlocations_load_location($lid);
  }
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
        $ll = explode(',', $latlon);
        $location['latitude'] = $ll[0];
        $location['longitude'] = $ll[1];
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        $location['key'] = '';
        $name = htmlspecialchars_decode(strip_tags($location['name']), ENT_QUOTES);
        $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $location['marker'], $location['key'], '', '');

        $sv_info = FALSE;
        if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
            $sv_info = getlocations_fields_svinfo($location);
          }
          if (getlocations_fields_map_settings_allow()) {
            $map_info = getlocations_fields_mapinfo($location);
          }
        }

        $ct++;
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  if ($sv_info) {
    $extra_info = array_merge($extra_info, $sv_info);
  }
  if ($map_info) {
    $extra_info = array_merge($extra_info, $map_info);
  }

  return getlocations_setlocations($latlons, $minmaxes, 'lids', '', $extra_info);

}

/**
 * Page callback: Displays a map.
 *
 * @param string $nidlist
 * A comma-delimited list of node ids
 *
 * @return
 *   Returns a map of locations.
 *
 */
function getlocations_nids($nidlist) {
  $nidarr = explode(',', $nidlist);
  $locations = array();
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $typemarkers = getlocations_get_markertypes('node');
  $ct = 0;
  $extra_info = array();
  $sv_info = FALSE;
  $map_info = FALSE;
  $module = getlocations_get_current_supported_module();

  foreach ($nidarr AS $nid) {
    $vid = getlocations_get_vid($nid);
    $locs = getlocations_load_locations($vid);
    if (count($locs)) {
      foreach ($locs AS $key => $loc) {
        $type = getlocations_get_nodetype($nid);
        if (isset($typemarkers[$type])) {
          $loc['marker'] = $typemarkers[$type];
        }
        $locations[] = $loc;
      }
    }
  }
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
        $ll = explode(',', $latlon);
        $location['latitude'] = $ll[0];
        $location['longitude'] = $ll[1];
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          if ($location['key'] == 'nid') {
            $location['lid'] = $nid;
          }
          elseif ($location['key'] == 'vid') {
            $location['lid'] = $vid;
          }
        }
        $name = htmlspecialchars_decode(strip_tags($location['name']), ENT_QUOTES);
        $latlons[$ct] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $location['marker'], $location['key'], '', '');

        $sv_info = FALSE;
        if ($module == 'getlocations_fields' && count($locations) == 1) {
          if (getlocations_fields_streetview_settings_allow()) {
            $sv_info = getlocations_fields_svinfo($location);
          }
          if (getlocations_fields_map_settings_allow()) {
            $map_info = getlocations_fields_mapinfo($location);
          }
        }

        $ct++;
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  if ($sv_info) {
    $extra_info = array_merge($extra_info, $sv_info);
  }
  if ($map_info) {
    $extra_info = array_merge($extra_info, $map_info);
  }

  return getlocations_setlocations($latlons, $minmaxes, 'nids', '', $extra_info);
}

/**
 * Set up javascript settings and map
 *
 * @param array $latlons
 * @param array $minmaxes
 * @param string $type
 * @param object $node
 * @param string $width
 * @param string $height
 *
 * @return string themed map html
 */
function getlocations_setlocations($latlons, $minmaxes='', $type='node', $node = '', $extras = '', $width='', $height='') {

  $getlocations_defaults = getlocations_defaults();
  $module = getlocations_get_current_supported_module();

  // sv
  if ($extras) {
    if ($module == 'getlocations_fields') {
      if (getlocations_fields_streetview_settings_allow()) {
        $getlocations_defaults['sv_heading']   = $extras['sv_heading'];
        $getlocations_defaults['sv_zoom']      = $extras['sv_zoom'];
        $getlocations_defaults['sv_pitch']     = $extras['sv_pitch'];
        $getlocations_defaults['sv_showfirst'] = $extras['sv_showfirst'];
        $getlocations_defaults['sv_addresscontrol']         = $extras['sv_addresscontrol'];
        $getlocations_defaults['sv_addresscontrolposition'] = $extras['sv_addresscontrolposition'];
        $getlocations_defaults['sv_pancontrol']             = $extras['sv_pancontrol'];
        $getlocations_defaults['sv_pancontrolposition']     = $extras['sv_pancontrolposition'];
        $getlocations_defaults['sv_zoomcontrol']            = $extras['sv_zoomcontrol'];
        $getlocations_defaults['sv_zoomcontrolposition']    = $extras['sv_zoomcontrolposition'];
        $getlocations_defaults['sv_linkscontrol']           = $extras['sv_linkscontrol'];
        $getlocations_defaults['sv_imagedatecontrol']       = $extras['sv_imagedatecontrol'];
        $getlocations_defaults['sv_scrollwheel']            = $extras['sv_scrollwheel'];
        $getlocations_defaults['sv_clicktogo']              = $extras['sv_clicktogo'];
      }
      if (getlocations_fields_map_settings_allow()) {
        $getlocations_defaults['nodezoom']     = $extras['mapzoom'];
        $getlocations_defaults['maptype']      = $extras['map_maptype'];
        // update baselayers
        $getlocations_defaults['baselayers'][$extras['map_maptype']] = 1;
      }
    }
  }

  $mapid = getlocations_setup_map($getlocations_defaults);

  getlocations_js_settings_do($getlocations_defaults, $latlons, $minmaxes, $mapid);

  if (empty($width)) {
    $width = $getlocations_defaults['width'];
  }
  if (empty($height)) {
    $height = $getlocations_defaults['height'];
  }

  return theme('getlocations_show', array('width' => $width, 'height' => $height, 'defaults' => $getlocations_defaults, 'mapid' => $mapid, 'latlons' => $latlons, 'minmaxes' => $minmaxes, 'type' => $type, 'node' => $node));

}

/**
 * Function to setup the map scripts
 *
 * @param array $defaults
 *   Required. the current settings.
 * Sets up the call to googlemaps, css and the relevant getlocations js in html head
 */
function getlocations_setup_map($defaults, $googleonly = FALSE, $sv = FALSE, $keyonly = FALSE,  $extcontrol = '') {
  $getlocations_mapid = &backdrop_static('getlocations_mapid', 0);

  // Generate unique Map ID.
  $getlocations_mapid++;
  $mapid = 'key_' . $getlocations_mapid;
  if (! $keyonly) {
    getlocations_setup_js($defaults, $googleonly, $sv, $extcontrol);
  }

  return $mapid;
}

/**
 * Function to setup the map scripts
 *
 * @param array $defaults
 *   Required. the current settings.
 * Sets up the call to googlemaps, css and the relevant getlocations js in html head
 */
function getlocations_setup_js($defaults, $googleonly = FALSE, $sv = FALSE, $extcontrol = '') {
  global $language;

  $current_js = backdrop_get_js();
  $current_css = backdrop_get_css();

  static $getlocations_js_weight = 0;
  $getlocations_js_weight++;
  if (is_numeric($defaults['getlocations_js_weight']) && $defaults['getlocations_js_weight'] != 0) {
    $getlocations_js_weight += $defaults['getlocations_js_weight'];
  }
  $api3_group = $defaults['api3_group'];
  $key = $api3_group['api3_key'];
  $clientID = $api3_group['api3_clientID'];
  $signature = $api3_group['api3_signature'];
  $channel = $api3_group['api3_channel'];
  $signed_in = $api3_group['api3_signed_in'];

  $aggr = (getlocations_aggr_get() ? TRUE : FALSE);

  // v3 googlemaps API
  $query = array();
  if (! empty($key)) {
    $query['key'] = $key;
    if ($signed_in) {
      $query['signed_in'] = 'true';
    }
  }
  if (! empty($clientID)) {
    $query['client'] = $clientID;
  }
  if (! empty($signature)) {
    $query['signature'] = $signature;
  }
  if (! empty($channel)) {
    $query['channel'] = $channel;
  }

  #$query['sensor'] = (getlocations_is_mobile() ? 'true' : 'false');

  $map_version = $defaults['map_version'];
  if ($map_version) {
    $query['v'] = $map_version;
  }

  if (isset($language->language)) {
    $query['language'] = $language->language;
  }

  if ($defaults['region_bias']) {
    $query['region'] = $defaults['region_bias'];
  }

  $libraries = array();
  if ($defaults['places'] || module_exists('getlocations_search')) {
    $libraries['places'] = 'places';
  }

  // not active but can be used by other modules
  if ($defaults['geometry']) {
    $libraries['geometry'] = 'geometry';
  }
  if ($defaults['visualization']) {
    $libraries['visualization'] = 'visualization';
  }
  if ($defaults['drawing']) {
    $libraries['drawing'] = 'drawing';
  }
  if ($defaults['adsense']) {
    $libraries['adsense'] = 'adsense';
  }

  // more libraries here

  // check for places library
  if (getlocations_places_check()) {
    $libraries['places'] = 'places';
  }

  // load libraries if any
  if (count($libraries)) {
    $query['libraries'] = implode(',', $libraries);
  }
  $get_is_https = $defaults['is_https'];
  if (! $get_is_https) {
    global $is_https;
     $get_is_https = $is_https;
  }
  $scheme = ($get_is_https ? 'https' : 'http');
  $gmapdomain = "maps.googleapis.com/maps/api/js";
  $gmaplink = url($scheme . '://' . $gmapdomain, array('query' => $query));
  if (!stristr($current_js, $scheme . '://' . $gmapdomain)) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'external';
    backdrop_add_js($gmaplink, $js_opts);
    $getlocations_js_weight++;
  }
  if ($defaults['use_jsapi']) {
    $jsapilink =  url($scheme . '://' . 'www.google.com/jsapi');
    if (!stristr($current_js, $jsapilink)) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'external';
      backdrop_add_js($jsapilink, $js_opts);
      $getlocations_js_weight++;
    }
  }

  // geocoder-js
  if ($defaults['geocoder_enable'] && $geocoder_path = getlocations_get_geocoder_path()) {
    if (!stristr($current_js, $geocoder_path)) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($geocoder_path, $js_opts);
      $getlocations_js_weight++;
    }
  }

  if ($googleonly) {
    return;
  }

  $getlocations_paths = getlocations_paths_get_all();

  if (!stristr($current_css, GETLOCATIONS_PATH . '/getlocations.css')) {
    backdrop_add_css(GETLOCATIONS_PATH . '/getlocations.css');
  }

  // streetview only
  if ($sv && module_exists('getlocations_fields')) {
    $getlocations_fields_paths = getlocations_fields_paths_get();
    if (!stristr($current_js, $getlocations_fields_paths['getlocations_fields_streetview_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_fields_paths['getlocations_fields_streetview_path'], $js_opts);
      $getlocations_js_weight++;
    }
    return;
  }

  if (!stristr($current_js, $getlocations_paths['getlocations_icons_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['getlocations_icons_path'], $js_opts);
    $getlocations_js_weight++;
  }

  $markerfile = getlocations_get_markerfile();
  if ($markerfile && !stristr($current_js, $markerfile)) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($markerfile, $js_opts);
    $getlocations_js_weight++;
  }

  if ($defaults['markermanagertype'] == 1 && !stristr($current_js, $getlocations_paths['markermanager_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['markermanager_path'], $js_opts);
    $getlocations_js_weight++;
  }
  elseif ($defaults['markermanagertype'] == 2 && !stristr($current_js, $getlocations_paths['markerclusterer_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['markerclusterer_path'], $js_opts);
    $getlocations_js_weight++;

    if (file_exists(GETLOCATIONS_PATH . '/getlocations.markercluster_override.inc')) {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster_override');
    }
    else {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster');
    }
    $markerclusterer_styles = getlocations_get_markerclusterer_styles();
    $js_opts = array();
    $js_opts['type'] = 'setting';
    backdrop_add_js(array('getlocations_markerclusterer' => $markerclusterer_styles), $js_opts);

  }

  if ($defaults['markeraction'] == 2 && !stristr($current_js, $getlocations_paths['infobubble_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['infobubble_path'], $js_opts);
    $getlocations_js_weight++;

    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['infobubble_extended_path'], $js_opts);
    $getlocations_js_weight++;

    if (file_exists(GETLOCATIONS_PATH . $getlocations_paths['infobubble_options_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['infobubble_options_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }
  elseif ($defaults['markeraction'] == 1 && file_exists($getlocations_paths['infowindow_options_path']) && !stristr($current_js, $getlocations_paths['infowindow_options_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['infowindow_options_path'], $js_opts);
    $getlocations_js_weight++;
  }

  // load main getlocations.js
  if (!stristr($current_js, $getlocations_paths['getlocations_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['getlocations_path'], $js_opts);
    $getlocations_js_weight++;
  }

  // polygons

  if ($defaults['polygons_group']['polygons_enable']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_polygons_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js(GETLOCATIONS_PATH . $getlocations_paths['getlocations_polygons_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }
  if ($defaults['rectangles_group']['rectangles_enable']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_rectangles_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_rectangles_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }
  if ($defaults['circles_group']['circles_enable']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_circles_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_circles_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }
  if ($defaults['polylines_group']['polylines_enable']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_polylines_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_polylines_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }
  // search_places
  if ($defaults['search_places_group']['search_places']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_search_places_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_search_places_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }

  // categories
  if ($defaults['category_method'] && $defaults['category_showhide_buttons']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_categories_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_categories_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }

  // preview map
  if ($extcontrol == 'preview_map') {
    if (!stristr($current_js, $getlocations_paths['getlocations_preview_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_preview_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }

  // geojson
  if ($defaults['geojson_enable'] && $geojson_path = getlocations_get_geojson_path()) {
    if (!stristr($current_js, $geojson_path)) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($geojson_path, $js_opts);
      $getlocations_js_weight++;
    }
    if ($defaults['geojson_data']) {
      if (!stristr($current_js, $getlocations_paths['getlocations_geojson_path'])) {
        $js_opts = array();
        $js_opts['weight'] = $getlocations_js_weight;
        $js_opts['type'] = 'file';
        $js_opts['preprocess'] = $aggr;
        backdrop_add_js($getlocations_paths['getlocations_geojson_path'], $js_opts);
        $getlocations_js_weight++;
      }
    }
  }

  if ($defaults['geo_enable'] && !stristr($current_js, $getlocations_paths['getlocations_geo_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $getlocations_js_weight + 10;
    $js_opts['type'] = 'file';
    $js_opts['preprocess'] = $aggr;
    backdrop_add_js($getlocations_paths['getlocations_geo_path'], $js_opts);
    $getlocations_js_weight++;
  }

#  if (module_exists('field_group') && !stristr($current_js, $getlocations_paths['getlocations_field_group_path'])) {
#    $js_opts = array();
#    $js_opts['weight'] = $getlocations_js_weight + 10;
#    $js_opts['type'] = 'file';
#    $js_opts['preprocess'] = $aggr;
#    backdrop_add_js($getlocations_paths['getlocations_field_group_path'], $js_opts);
#    $getlocations_js_weight++;
#
#  }

  // w3w
  #$what3words = getlocations_w3w_settings();
  #$what3words_lic = $what3words['what3words_lic'];
  #$what3words_group = $what3words['what3words_group'];
  if ($defaults['what3words_lic']['key'] && $defaults['what3words_group']['what3words_enable']) {
    if (!stristr($current_js, $getlocations_paths['getlocations_what3words_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $getlocations_js_weight;
      $js_opts['type'] = 'file';
      $js_opts['preprocess'] = $aggr;
      backdrop_add_js($getlocations_paths['getlocations_what3words_path'], $js_opts);
      $getlocations_js_weight++;
    }
  }

}

function getlocations_get_keys() {
  $settings = getlocations_defaults();
  $keys = array_keys($settings);
  return $keys;
}

/**
 * Some defaults.
 *
 * @return
 *   Returns the current settings
 */
function getlocations_defaults() {
  $defaults = config_get('getlocations.settings', 'settings');
  return $defaults;
}

/**
 * Function to check a lat,lon string
 *
 * @param string $latlon
 *
 * @return
 *   Returns normalized string or false
 */
function getlocations_latlon_check($latlon) {

  if (! empty($latlon)) {
    $ll = explode(',', $latlon);
    $lat = (isset( $ll[0]) ? $ll[0] : FALSE);
    $lon = (isset( $ll[1]) ? $ll[1] : FALSE);
    $lat = trim($lat);
    $lon = trim($lon);

    if ((abs($lat) || abs($lon)) && is_numeric($lat) && is_numeric($lon)) {
      $latregex = "/[-+]{0,1}[0-9]{1,}\.{1}[0-9]{1,}/";
      if (! strpos($lat, '.')) {
        $latregex = "/[-+]{0,1}[0-9]{1,}/";
      }
      $lonregex = "/[-+]{0,1}[0-9]{1,}\.{1}[0-9]{1,}/";
      if (! strpos($lon, '.')) {
        $lonregex = "/[-+]{0,1}[0-9]{1,}/";
      }
      if (preg_match($latregex, $lat) && preg_match($lonregex, $lon)) {
        // Normalize coordinates.
        $lat = getlocations_normalizelat($lat);
        $lon = getlocations_normalizelng($lon);
        return $lat . "," . $lon;
      }
    }
  }
  return FALSE;
}

/**
 * Function to check wether the google places library should be enabled.
 *
 * @return bool
 *
 *
 */
function getlocations_places_check() {
  $found = FALSE;
  if (module_exists('getlocations_fields')) {
    $getlocations_fields_defaults = getlocations_fields_defaults();
    if (isset($getlocations_fields_defaults['use_address']) && $getlocations_fields_defaults['use_address']) {
      $found = TRUE;
    }
  }
  $getlocations_defaults = getlocations_defaults();
  if ($getlocations_defaults['getdirections_enabled']) {
    $getdirections_defaults = getdirections_defaults();
    if (isset($getdirections_defaults['advanced_autocomplete']) && $getdirections_defaults['advanced_autocomplete']) {
      $found = TRUE;
    }
  }
  if (module_exists('getlocations_search')) {
    $getlocations_search_defaults = getlocations_search_defaults();
    if (isset($getlocations_search_defaults['method']) && $getlocations_search_defaults['method'] == 'google_ac') {
      $found = TRUE;
    }
  }
  return $found;
}

/**
 * Function to get the vid from node table.
 *
 * @param int $nid
 *
 * @return
 *   Returns vid.
 */
function getlocations_get_vid($nid) {
  if (is_numeric($nid) && $nid ) {
    $query = db_select('node', 'n')->fields('n', array('vid'))->condition('n.nid', $nid);
    $row = $query->execute()->fetchAssoc();
    return (isset($row['vid']) && $row['vid'] ? $row['vid'] : FALSE);
  }
  return FALSE;
}

/**
 * Function to get the nid from node table.
 *
 * @param int $vid
 *
 * @return
 *   Returns nid.
 */
function getlocations_get_nid($vid) {
  if (is_numeric($vid) && $vid ) {
    $query = db_select('node', 'n')->fields('n', array('nid'))->condition('n.vid', $vid);
    $row = $query->execute()->fetchAssoc();
    return (isset($row['nid']) && $row['nid'] ? $row['nid'] : FALSE);
  }
  return FALSE;
}

/**
 * Function to get nid from getlocations_fields_entities or location_instance table.
 *
 * @param int $lid
 *
 * @return
 *   Returns nid.
 */
function getlocations_get_nid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['nid']) && $row['nid'] ? $row['nid'] : FALSE);
    }
  }
  return FALSE;
}

/**
 * Function to get uid from getlocations_fields_entities or location_instance table.
 *
 * @param int $lid
 *
 * @return
 *   Returns uid.
 */
function getlocations_get_uid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('uid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['uid']) && $row['uid'] ? $row['uid'] : FALSE);
    }
  }
  return FALSE;
}

/**
 * Function to get tid from getlocations_fields_entities table.
 *
 * @param int $lid
 *
 * @return
 *   Returns tid.
 */
function getlocations_get_tid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('tid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['tid']) && $row['tid'] ? $row['tid'] : FALSE);
    }
  }
  return FALSE;
}

/**
 * Function to get cid from getlocations_fields_entities table.
 *
 * @param int $lid
 *
 * @return
 *   Returns cid.
 */
function getlocations_get_cid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('cid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['cid']) && $row['cid'] ? $row['cid'] : FALSE);
    }
  }
  return FALSE;
}

/**
 * Function to get entity type from getlocations_fields_entities or location_instance table.
 *
 * @param int $lid
 *
 * @return
 *   Returns entity type.
 */
function getlocations_get_type_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid', 'uid', 'tid', 'cid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      $type = '';
      if (isset($row['nid']) && $row['nid'] > 0) {
        $type = 'node';
      }
      elseif (isset($row['uid']) && $row['uid'] > 0) {
        $type = 'user';
      }
      elseif (isset($row['tid']) && $row['tid'] > 0 && module_exists('taxonomy')) {
        $type = 'vocabulary';
      }
      elseif (isset($row['cid']) && $row['cid'] > 0 && module_exists('comment')) {
        $type = 'comment';
      }
      return $type;
    }
  }
  return FALSE;
}

/**
 * Function to get entity path from getlocations_fields_entities table.
 *
 * @param int $lid
 *
 * @return
 *   Returns entity path as url.
 */
function getlocations_get_path_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid', 'uid', 'tid', 'cid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      $path = '';
      if (isset($row['nid']) && $row['nid'] > 0) {
        $path = url('node/' . $row['nid']);
      }
      elseif (isset($row['uid']) && $row['uid'] > 0) {
        $path = url('user/' . $row['uid']);
      }
      elseif (isset($row['tid']) && $row['tid'] > 0 && module_exists('taxonomy')) {
        $path = url('taxonomy/term/' . $row['tid']);
      }
      elseif (isset($row['cid']) && $row['cid'] > 0 && module_exists('comment')) {
        $path = url('comment/' . $row['cid']);
      }
      return $path;
    }
  }
  return FALSE;
}

/**
 * Ajax callback
 * Fetches bubble content
 *
 * @see theme_getlocations_adinfo()
 */
function getlocations_adinfo() {

  $lid = $_GET['lid'];
  $lidkey = $_GET['key'];

  $extra = FALSE;
  if (isset($_GET['sdist'])) {
    $extra['sdist'] = $_GET['sdist'];
  }
  if (isset($_GET['gdlink'])) {
    $extra['gdlink'] = $_GET['gdlink'];
  }

  $content = getlocations_getinfo($lid, $lidkey, $extra);
  backdrop_json_output(array('content' => $content));

}

/**
 * @param int $lid location id
 * @param string entity id
 * @return string formatted address
 */
function getlocations_getinfo($lid, $lidkey, $extra=FALSE) {

  $content = FALSE;
  if ($lid > 0) {
    if (module_exists('getlocations_fields')) {
      $location = getlocations_load_location($lid);
      $location['nid'] = 0;
      $location['uid'] = 0;
      $location['tid'] = 0;
      $location['cid'] = 0;

      $type = getlocations_get_type_from_lid($lid);
      if ($type == 'node') {
        if ($nid = getlocations_get_nid_from_lid($lid)) {
          $location['nid'] = $nid;
        }
      }
      elseif ($type == 'user') {
        if ($uid = getlocations_get_uid_from_lid($lid)) {
          $location['uid'] = $uid;
        }
      }
      elseif ($type == 'vocabulary' && module_exists('taxonomy')) {
        if ($tid = getlocations_get_tid_from_lid($lid)) {
          $location['tid'] = $tid;
        }
      }
      elseif ($type == 'comment' && module_exists('comment')) {
        if ($cid = getlocations_get_cid_from_lid($lid)) {
          $location['cid'] = $cid;
        }
      }
    }

    if ($extra) {
      if (is_array($extra) && isset($extra['sdist'])) {
        $sdist = $extra['sdist'];
        $arr = explode('|', $sdist);
        $sunit = $arr[0];
        $slat = $arr[1];
        $slon = $arr[2];
        $lat = $location['latitude'];
        $lon = $location['longitude'];
        $latlon_a = array('lat' => $slat, 'lon' => $slon);
        $latlon_b = array('lat' => $lat, 'lon' => $lon);
        $dist = getlocations_distance_between($latlon_a, $latlon_b, $sunit);
        $location['sdist'] = $dist['scalar'];
        $location['sunit'] = $dist['distance_unit'];
      }
      if (is_array($extra) && isset($extra['gdlink'])) {
        $location['getdirections_link'] = $extra['gdlink'];
      }
    }

    $content = theme('getlocations_adinfo', array('location' => $location));
  }
  return $content;

}

/**
 * Ajax callback
 * Provides a link
 *
 * @see theme_getlocations_lidinfo()
 *
 */
function getlocations_lidinfo() {
  $lid = $_GET['lid'];
  $lidkey = $_GET['key'];
  $content = getlocations_getlidinfo($lid, $lidkey);
  backdrop_json_output(array('content' => $content));
}

/**
 * @param int $lid location id
 * @param string entity id
 * @return string path
 */
function getlocations_getlidinfo($lid, $lidkey) {
  $content = theme('getlocations_lidinfo', array('lid' => $lid, 'lidkey' => $lidkey));
  return $content;
}

/**
 * Ajax callback
 * provides data for marker colorbox
 *
 * @see template_preprocess_getlocations_marker_box()
 * @see getlocations_marker_box.tpl.php
 */
function getlocations_markerinfo() {
  $linktype = $_GET['lt'];
  $cat =  $_GET['cat'];
  $content = "";
  $icons =   getlocations_get_icondata();
  $data = array();
  $files = array();
  $machine_names = array();
  $display_names = array();
  $positions = array();
  $iconct = 0;
  foreach (array_keys($icons) AS $path) {
    if (preg_match("~^/.*/$~", $path)) {
      continue;
    }
    $files = $icons[$path]['f'];
    $machine_names = $icons[$path]['i'][0][0][0];
    $display_names = $icons[$path]['i'][0][0][1];
    $positions     = $icons[$path]['i'][0][0][2];
    $newpositions = array();
    foreach ($positions AS $pos) {
      if (isset($pos[0])) {
        $newpositions[] = $pos[0];
      }
    }
    $adj = 0;
    foreach ($newpositions AS $pos) {
      // no shadow
      if ($pos < 1) {
        $adj = 1;
      }
      // skip this
      if ($files[$pos] == 'shadow.png') {
        continue;
      }
      $data[$iconct]['path'] = $path . $files[$pos];
      $data[$iconct]['machine_name'] = $machine_names[$pos + $adj];
      $data[$iconct]['display_name'] = $display_names[$pos + $adj];
      $iconct++;
    }
  }
  $content['data'] = $data;
  $content['linktype'] = $linktype;
  $content['cat'] = $cat;
  $output = theme('getlocations_marker_box', array('content' => $content));
  print $output;
  exit;
}

function getlocations_cb_w3w() {
  $data = FALSE;
  $content = FALSE;
  if (isset($_REQUEST['data'])) {
    $data = $_REQUEST['data'];
  }
  if ($data) {
    if ($latlon = getlocations_latlon_check($data)) {
      # we have a latlon
      $type = 'reverse';
    }
    else {
      # must be a w3w
      $type = 'forward';
    }
    $content = getlocations_cb_w3w_get($data, $type);
  }
  print $content;
  exit;
}

function getlocations_cb_w3w_get($data, $type) {
  global $language;
  $types = array('forward', 'reverse');
  if (in_array($type, $types)) {
    $what3words = getlocations_w3w_settings();
    if (! empty($what3words['what3words_lic']['key'])) {
      // this is for v2 API
      $url = $what3words['what3words_lic']['url'] . '/v2/' . $type;
      $opts = array(
        'method' => 'GET',
        'headers' => array(
          'Content-Type' => 'application/x-www-form-urlencoded',
          'X-Api-Key' => $what3words['what3words_lic']['key']
        )
      );
      $datarr = array();
      if ($type == 'reverse') {
        $datarr[] = "coords=$data";
      }
      else {
        $datarr[] = "addr=$data";
      }
      $datarr[] = "lang=" . (isset($language->language ) ? $language->language : 'en');
      $datastr = implode('&', $datarr);
      $url = $url . '?' . $datastr;
      $response = backdrop_http_request($url, $opts);
      if ($response->code == '200') {
        return $response->data;
      }
    }
  }
  return FALSE;
}

/**
 * Get the list of marker titles.
 * adapted from gmap
 */
function getlocations_get_marker_titles($reset = FALSE) {
  static $titles;

  if (!$reset) {
    if (is_array($titles)) {
      return $titles;
    }

    $cached = cache_get('getlocations_marker_titles', 'cache');
    if (!empty($cached)) {
      $titles = $cached->data;
      if (is_array($titles)) {
        return $titles;
      }
    }
  }

  module_load_include('inc', 'getlocations', 'getlocations.markerinfo');
  $titles = _getlocations_get_marker_titles();
  cache_set('getlocations_marker_titles', $titles, 'cache');
  return $titles;
}

/**
 * Get the JSON icon data for all the default markers.
 * adapted from gmap
 */
function getlocations_get_icondata($reset = FALSE) {
  static $icons;
  if (is_array($icons) && !$reset) {
    return $icons;
  }

  $icons = cache_get('getlocations_icondata');
  if ($icons) {
    $icons = $icons->data;
  }

  if ($reset || !$icons) {
    module_load_include('inc', 'getlocations', 'getlocations.markerinfo');
    $icons = _getlocations_get_icondata();
  }
  if ($icons) {
    cache_set('getlocations_icondata', $icons, 'cache');
  }
  return $icons;
}

/**
 * Regenerate the markerdata file.
 * adapted from gmap
 */
function getlocations_regenerate_markers() {
  // This often fails in cli mode, so bail.
  if (backdrop_is_cli()) {
    return;
  }

  $icons = getlocations_get_icondata(TRUE);
  if ($icons) {
    $contents = '';

    $contents .= "// Getlocations marker image data.\n";
    $contents .= "Backdrop.getlocations.iconpath = " . backdrop_json_encode(base_path()) . ";\n";
    $contents .= "Backdrop.getlocations.icondata = " . backdrop_json_encode($icons) . ";\n";

    // Create the js/ within the files folder.
    $jspath = getlocations_get_markerfile(TRUE, FALSE);
    $jsfile = getlocations_get_markerfile(FALSE, FALSE);
    if ($jspath && $jsfile && file_prepare_directory($jspath, FILE_CREATE_DIRECTORY) && file_unmanaged_save_data($contents, $jsfile, FILE_EXISTS_REPLACE)) {
      // Also regenerate the cached marker titles array
      getlocations_get_marker_titles(TRUE);
    }
    else {
      // failed
      backdrop_set_message(t('Getlocations is unable to save the marker configuration, so the markers will not work. Please check file system permissions of %filepath!', array('%filepath' => $jsfile)), 'error');
      watchdog('getlocations', 'Getlocations write error when saving the marker configuration to %filepath.', array('%filepath' => $jsfile), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  else {
    // no markers found
      backdrop_set_message(t('No markers found, you need to install some markers, please see the project page for details.'), 'error');
      watchdog('getlocations', 'No markers found.', array(), WATCHDOG_ERROR);
      return FALSE;
  }
  return TRUE;
}

/**
 * Function to find and return the filesystem path and filename of the markers definition javascript file
 *
 */
function getlocations_get_markerfile($dir=FALSE, $check=TRUE) {

  if (file_default_scheme() != 'public') {
    // private
    // TODO
    $markerpath = '';
    $markerfile = config_get('getlocations_private_markerfile', '');
    if ($markerfile && preg_match("~^(.*)/getlocations_markers.js~", $markerfile, $matches)) {
      $markerpath = $matches[1];
    }
  }
  else {
    $markerpath = file_stream_wrapper_get_instance_by_scheme(file_default_scheme())->getDirectoryPath() . '/getlocations';
    $markerfile = '';
    if ($markerpath) {
      $markerfile = $markerpath . '/getlocations_markers.js';
    }
  }
  if ($dir && $markerpath) {
    if ($check) {
      if (file_exists($markerpath)) {
        return $markerpath;
      }
    }
    else {
      return $markerpath;
    }
  }
  elseif ($markerfile) {
    if ($check) {
      if (file_exists($markerfile)) {
        return $markerfile;
      }
    }
    else {
      return $markerfile;
    }
  }
  return FALSE;
}

/**
 * hook_getlocations_markerdir()
 * from jhm http://backdrop.org/user/15946
 *
 * This hook allows modules or themes to add their own markers
 */
function getlocations_getlocations_markerdir() {
  $markerdir = libraries_get_path('getlocations') . '/markers';
  return $markerdir;
}

/**
 * @param int $ct $location $minmaxes
 *
 * @return
 *   Returns $minmaxes
 *
 */
function getlocations_do_minmaxes($ct, $location, $minmaxes) {
  if ($minmaxes == '') {
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  }
  if ($ct) {
    // latitudes
    if ($location['latitude'] > $minmaxes['maxlat']) {
      $minmaxes['maxlat'] = $location['latitude'];
    }
    if ($location['latitude'] < $minmaxes['minlat']) {
      $minmaxes['minlat'] = $location['latitude'];
    }
    // longitudes
    if ($location['longitude'] > $minmaxes['maxlon']) {
      $minmaxes['maxlon'] = $location['longitude'];
    }
    if ($location['longitude'] < $minmaxes['minlon']) {
      $minmaxes['minlon'] = $location['longitude'];
    }
  }
  else {
    $minmaxes['minlat'] = $location['latitude'];
    $minmaxes['minlon'] = $location['longitude'];
    $minmaxes['maxlat'] = $location['latitude'];
    $minmaxes['maxlon'] = $location['longitude'];
  }
  return $minmaxes;
}

/**
 * Function for colorbox and suchlike
 *
 * @return
 *   Returns themed content
 *
 */
function getlocations_box() {

  $a1 = FALSE;
  $a2 = FALSE;
  $a3 = FALSE;
  $a4 = FALSE;

  if (arg(1)) {
    $a1 = arg(1);
  }
  if (arg(2)) {
    $a2 = arg(2);
  }
  if (arg(3)) {
    $a3 = arg(3);
  }
  if (arg(4)) {
    $a4 = arg(4);
  }

  $content = '';

  // $a1 can be node, user, users, type, lids, nids
  if ($a1 == 'node' && $a2) {
    $content .= getlocations_nodemap($a2);
  }
  elseif ($a1 == 'user' && $a2) {
    $content .= getlocations_usermap($a2);
  }
  elseif ($a1 == 'term' && $a2) {
    $content .= getlocations_termmap($a2);
  }
  elseif ($a1 == 'comment' && $a2) {
    $content .= getlocations_commentmap($a2);
  }
  elseif ($a1 == 'users') {
    $content .= getlocations_usersmap();
  }
  elseif ($a1 == 'type' && $a2) {
    $content .= getlocations_typemap($a2, $a3, $a4);
  }
  elseif ($a1 == 'lids' && $a2) {
    $content .= getlocations_lids($a2);
  }
  elseif ($a1 == 'nids' && $a2) {
    $content .= getlocations_nids($a2);
  }

  $output = theme('getlocations_box', array('content' => $content));
  print $output;
  exit;
}

/**
 * Function to fetch node types
 *
 *
 * @return
 *   Returns array of node types supported by the current supported locative module
 *
 */
function getlocations_get_types() {
  $options = array();
  foreach (node_type_get_types() as $type => $object) {
    if (getlocations_check_node($type)) {
      $options[$type] = $object->name;
    }
  }
  return $options;
}

/**
 * Function to check if bundle has a locative field
 *
 * @param string $bundle
 *
 * @return
 *   Returns boolean
 *
 */
// TODO
function getlocations_check_node($bundle) {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    #$query = db_select('field_config', 'f');
    #$query->fields('f', array('id'));
    #$query->join('field_config_instance', 'i', 'f.id=i.field_id');
    #$query->condition('i.bundle', $bundle)
    #  ->condition('f.module', $module)
    #  ->condition('i.entity_type', 'node')
    #  ->condition('f.active', 1);
    #$rows = $query->execute();
    #$ct = 0;
    #foreach ($rows AS $row) {
    #  $ct++;
    #}
    #if ($ct) {
      return TRUE;
    #}
  }
  return FALSE;
}

/**
 * Function to collect field name
 *
 * @param string $bundle
 * @param string $entity_type
 *
 * @return
 *   Returns field name or FALSE
 *
 */
// TODO
function getlocations_get_fieldname($bundle, $entity_type='node') {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    #$query = db_select('field_config', 'f');
    #$query->fields('f', array('field_name'));
    #$query->join('field_config_instance', 'i', 'f.id=i.field_id');
    #$query->condition('i.bundle', $bundle)
    #  ->condition('f.module', $module)
    #  ->condition('i.entity_type', $entity_type)
    #  ->condition('f.active', 1);
    #$rows = $query->execute();
    #$ct = 0;
    #foreach ($rows AS $row) {
    #  $data = $row->field_name;
    #  $ct++;
    #}
    #if ($ct) {
    #  return $data;
    #}
  }
  return FALSE;
}

/**
 * Function to collect field names
 *
 * @param string $bundle
 * @param string $entity_type
 *
 * @return
 *   Returns field names or FALSE
 *
 */
// TODO
function getlocations_get_fieldname2($bundle, $entity_type='node') {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    #$query = db_select('field_config', 'f');
    #$query->fields('f', array('field_name'));
    #$query->join('field_config_instance', 'i', 'f.id=i.field_id');
    #$query->condition('i.bundle', $bundle)
    #  ->condition('f.module', $module)
    #  ->condition('i.entity_type', $entity_type)
    #  ->condition('f.active', 1);
    #$rows = $query->execute();
    #$ct = 0;
    #foreach ($rows AS $row) {
    #  $data[$ct] = $row->field_name;
    #  $ct++;
    #}
    #if ($ct) {
    #  return $data;
    #}
  }
  return FALSE;
}

/**
 * Function to collect entities being used by the given module
 *
 * @param string $module
 *
 * @return
 *   Returns array of entity names or FALSE
 *
 */
// TODO
function getlocations_get_supported_entities($module = FALSE) {
  if (! $module) {
    $module = getlocations_get_current_supported_module();
  }
  if ($module) {
    $data = array();
    $data['node'] = 'node';
    $data['user'] = 'user';
    if (module_exists('comment')) {
      $data['comment'] = 'comment';
    }
    if (module_exists('taxonomy')) {
      $data['taxonomy'] = 'taxonomy';
    }

    #$query = db_select('field_config', 'f');
    #$query->fields('i', array('entity_type'));
    #$query->join('field_config_instance', 'i', 'f.id = i.field_id');
    #$query->condition('f.module', $module)
    #  ->condition('f.active', 1);
    #$rows = $query->execute();
    #$data = array();
    #foreach ($rows AS $row) {
    #  $data[$row->entity_type] = $row->entity_type;
    #}
    return (count($data) ? array_keys($data) : FALSE);
  }
  return FALSE;
}

/**
 * Function is an entity_type location enabled?
 *
 * @param string $entity_type
 * @param string $bundle
 *
 * @return
 *   Returns boolean
 *
 */
function getlocations_check_entity_type($entity_type = '', $bundle = '') {
  if ($entity_type == 'term') {
    $entity_type = 'taxonomy_term';
  }
  if ($module = getlocations_get_current_supported_module()) {
    if ($module == 'getlocations_fields') {
      $fields = array("node" => "nid", "user" => "uid", "taxonomy_term" => "tid", "comment" => "cid");
      if (isset($fields[$entity_type])) {
        $field = $fields[$entity_type];
        $query = db_select('getlocations_fields_entities', 'e');
        $query->fields('e', array($field));
        $query->condition("e.$field", 0, '>');
        $number_of_rows = $query->countQuery()->execute()->fetchField();
        if ($number_of_rows) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Function gets list of vocabularies
 *
 * @return
 *   Returns array
 *
 */
function getlocations_get_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        if (getlocations_check_vocabulary($vocabulary->machine_name)) {
          $options[$vid] = $vocabulary->name;
        }
      }
      return $options;
    }
  }
  return FALSE;
}

/**
 * Function gets list of vocabulary machine names
 *
 * @return
 *   Returns array
 *
 */
function getlocations_get_machine_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        if (getlocations_check_vocabulary($vocabulary->machine_name)) {
          $options[$vid] = $vocabulary->machine_name;
        }
      }
      return $options;
    }
  }
  return FALSE;
}

/**
 * Function to check a vocabulary
 *
 * @return
 *   Returns bool
 *
 */
function getlocations_check_vocabulary($machine_name) {
  if (module_exists('taxonomy')) {
    return getlocations_check_entity_type('taxonomy_term', $machine_name);
  }
  return FALSE;
}

/**
 * Function list of term reference fields
 *
 * @return
 *   Returns array
 *
 */
function getlocations_get_term_reference_fields() {
  $module = 'taxonomy';
  $type = 'taxonomy_term_reference';
  $fif = field_info_fields();
  $data = array();

  foreach ($fif AS $k => $v) {
    if ( $v['module'] == $module && $v['type'] == $type && $v['active'] == 1) {
      $data[$v['field_name']] = $v['field_name'];
    }
  }

  #$query = db_select('field_config', 'f');
  #$query->fields('f', array('field_name'));
  #$query->condition('f.module', $module)
  #  ->condition('f.type', $type)
  #  ->condition('f.active', 1);
  #$rows = $query->execute();
  #$data = array();
  #foreach ($rows AS $row) {
  #  $data[$row->field_name] = $row->field_name;
  #}

  return $data;

}

/**
 * Function to fetch list of markers
 *
 * @param string $type
 *
 * @return
 *   Returns list of markers
 *
 */
// TODO
function getlocations_get_markertypes($type) {

  return FALSE;

  $getlocations_defaults = getlocations_defaults();

  $markertypes = array();
  if ($type == 'node') {
    $default_marker = $getlocations_defaults['node_map_marker'];
    #$getlocations_node_marker = config_get('getlocations_node_marker', array('enable' => 0));
    if ($getlocations_node_marker['enable']) {
      if ($content_types = getlocations_get_types()) {
        foreach ($content_types AS $content_type => $name ) {
          $field_names = getlocations_get_fieldname2($content_type, 'node');
          foreach ($field_names AS $field_name) {
            if (isset($getlocations_node_marker['content_type'][$content_type]['field_name'][$field_name]['map_marker'])) {
              $markertypes[$content_type] = $getlocations_node_marker['content_type'][$content_type]['field_name'][$field_name]['map_marker'];
            }
            else {
              $markertypes[$content_type] = $default_marker;
            }
          }
        }
      }
    }
    return $markertypes;
  }
  elseif ($type == 'vocabulary' && module_exists('taxonomy')) {
    $default_marker = $getlocations_defaults['vocabulary_map_marker'];
    $vocabularies = getlocations_get_vocabularies();
    #$getlocations_vocabulary_marker = config_get('getlocations_vocabulary_marker', array('enable' => 0));
    foreach ($vocabularies AS $vid => $vocabulary) {
      if ($getlocations_vocabulary_marker['enable'] && isset($getlocations_vocabulary_marker['vocabulary'][$vid]['map_marker'])) {
        $markertypes[$vid] = $getlocations_vocabulary_marker['vocabulary'][$vid]['map_marker'];
      }
      else {
        $markertypes[$vid] = $default_marker;
      }
    }
    return $markertypes;
  }
  elseif ($type == 'term' && module_exists('taxonomy')) {
    $default_marker = $getlocations_defaults['term_map_marker'];
    #$getlocations_term_marker = config_get('getlocations_term_marker', array('enable' => 0, 'vids' => 0, 'max_depth' => ''));
    if ($getlocations_term_marker['enable'] && $getlocations_term_marker['vids'] ) {
      $depth = is_numeric($getlocations_term_marker['max_depth']) && $getlocations_term_marker['max_depth'] > 0 ? $getlocations_term_marker['max_depth'] : NULL;
      $vids = $getlocations_term_marker['vids'];
      foreach ($vids AS $vid) {
        $terms = taxonomy_get_tree($vid, 0, $depth);
        foreach ($terms AS $term) {
          if (isset($getlocations_term_marker['vid'][$vid]['term'][$term->tid]['map_marker'])) {
            $markertypes[$term->tid] = $getlocations_term_marker['vid'][$vid]['term'][$term->tid]['map_marker'];
          }
          else {
            $markertypes[$term->tid] = $default_marker;
          }
        }
      }
    }
    return $markertypes;
  }
  else {
    return FALSE;
  }
}

/**
 * Function to fetch a node type or bundle
 *
 * @param int $nid The node Identifier
 *
 * @return
 *   Returns the bundle name or false
 *
 */
function getlocations_get_nodetype($nid) {
  $query = db_select('node', 'n')->fields('n', array('type'))->condition('n.nid', $nid);
  $row = $query->execute()->fetchAssoc();
  return (isset($row['type']) && $row['type'] ? $row['type'] : FALSE);
}

/**
 * Function sets up javascript settings
 *
 * @param array $defaults
 * @param array $latlons
 * @param array $minmaxes
 * @param string $mapid
 * @param bool $inputmap
 * @param string $extcontrol
 *
 */
function getlocations_js_settings_do($defaults, $latlons, $minmaxes, $mapid, $inputmap = FALSE, $extcontrol = '') {

  global $language;
  $latlong = $defaults['latlong'];
  $lla = explode(',', $latlong);
  $lat = $lla[0];
  $lng = $lla[1];
  $settings = array(
    $mapid => array(
      'lat'                       => trim($lat),
      'lng'                       => trim($lng),
      'locale_prefix'             => (isset($language->prefix) ? $language->prefix : ''),
      'zoom'                      => $defaults['zoom'],
      'minzoom_map'               => $defaults['minzoom_map'],
      'maxzoom_map'               => $defaults['maxzoom_map'],
      'maptype'                   => $defaults['maptype'],
      'controltype'               => $defaults['controltype'],
      'mtc'                       => $defaults['mtc'],
      'baselayers'                => $defaults['baselayers'],
      'scale'                     => $defaults['scale'],
      'scrollwheel'               => $defaults['scrollwheel'],
      'trafficinfo'               => $defaults['trafficinfo'],
      'trafficinfo_state'         => $defaults['trafficinfo_state'],
      'bicycleinfo'               => $defaults['bicycleinfo'],
      'bicycleinfo_state'         => $defaults['bicycleinfo_state'],
      'transitinfo'               => $defaults['transitinfo'],
      'transitinfo_state'         => $defaults['transitinfo_state'],
      'sv_show'                   => $defaults['sv_show'],
      'svcontrolposition'         => $defaults['svcontrolposition'],
      'sv_showfirst'              => (isset($defaults['sv_showfirst']) ? $defaults['sv_showfirst'] : 0),
      'sv_heading'                => (isset($defaults['sv_heading']) ? $defaults['sv_heading'] : 0),
      'sv_zoom'                   => (isset($defaults['sv_zoom']) ? $defaults['sv_zoom'] : 1),
      'sv_pitch'                  => (isset($defaults['sv_pitch']) ? $defaults['sv_pitch'] : 0),
      'poi_show'                  => $defaults['poi_show'],
      'transit_show'              => $defaults['transit_show'],
      'map_marker'                => $defaults['node_map_marker'],
      'markeraction'              => $defaults['markeraction'],
      'markeractiontype'          => $defaults['markeractiontype'],
      'markeraction_click_zoom'   => $defaults['markeraction_click_zoom'],
      'markeraction_click_center' => $defaults['markeraction_click_center'],
      'minzoom'                   => $defaults['minzoom'],
      'maxzoom'                   => $defaults['maxzoom'],
      'nodezoom'                  => $defaults['nodezoom'],
      'markermanagertype'         => $defaults['markermanagertype'],
      'usemarkermanager'          => $defaults['usemarkermanager'],
      'useclustermanager'         => $defaults['markerclusterer_group']['useclustermanager'],
      'markerclusterer_style'     => $defaults['markerclusterer_group']['markerclusterer_style'],
      'markerclusterer_zoom'      => $defaults['markerclusterer_group']['markerclusterer_zoom'],
      'markerclusterer_size'      => $defaults['markerclusterer_group']['markerclusterer_size'],
      'markerclusterer_minsize'   => $defaults['markerclusterer_group']['markerclusterer_minsize'],
      'markerclusterer_title'     => $defaults['markerclusterer_group']['markerclusterer_title'],
      'markerclusterer_imgpath'   => $defaults['markerclusterer_group']['markerclusterer_imgpath'],
      'pansetting'                => $defaults['pansetting'],
      'draggable'                 => $defaults['draggable'],
      'styles'                    => $defaults['styles'],
      'custom_content_enable'     => $defaults['custom_content_enable'],
      'preload_data'              => $defaults['preload_data'],
      'map_backgroundcolor'       => $defaults['map_backgroundcolor'],
      'show_maplinks'             => $defaults['show_maplinks'],
      'show_maplinks_viewport'    => $defaults['show_maplinks_viewport'],
      'fullscreen'                => $defaults['fullscreen'],
      'show_bubble_on_one_marker' => $defaults['show_bubble_on_one_marker'],
      'kml_url'                   => $defaults['kml_group']['kml_url'],
      'fullscreen_disable'        => $defaults['fullscreen_disable'],
      'fullscreen_controlposition' => $defaults['fullscreen_controlposition'],
      'places'                    => $defaults['places'],
      'search_places'             => $defaults['search_places_group']['search_places'],
      'getdirections_enabled'     => $defaults['getdirections_enabled'],
      'is_https'                  => $defaults['is_https'],
      'geojson_enable'            => $defaults['geojson_enable'],
      'nokeyboard'                => $defaults['nokeyboard'],
      'nodoubleclickzoom'         => $defaults['nodoubleclickzoom'],
      'zoomcontrolposition'       => $defaults['zoomcontrolposition'],
      'mapcontrolposition'        => $defaults['mapcontrolposition'],
      'scalecontrolposition'      => $defaults['scalecontrolposition'],

#      'sv_addresscontrol'         => $defaults['sv_group']['sv_addresscontrol'], // sv overlay controls
#      'sv_addresscontrolposition' => $defaults['sv_group']['sv_addresscontrolposition'],
#      'sv_pancontrol'             => $defaults['sv_group']['sv_pancontrol'],
#      'sv_pancontrolposition'     => $defaults['sv_group']['sv_pancontrolposition'],
#      'sv_zoomcontrol'            => $defaults['sv_group']['sv_zoomcontrol'],
#      'sv_zoomcontrolposition'    => $defaults['sv_group']['sv_zoomcontrolposition'],
#      'sv_linkscontrol'           => $defaults['sv_group']['sv_linkscontrol'],
#      'sv_imagedatecontrol'       => $defaults['sv_group']['sv_imagedatecontrol'],
#      'sv_scrollwheel'            => $defaults['sv_group']['sv_scrollwheel'],
#      'sv_clicktogo'              => $defaults['sv_group']['sv_clicktogo'],

      'input_map_show'            => $defaults['input_map_show'],
      'inputmap'                  => ($inputmap ? 1 : 0),
      'extcontrol'                => $extcontrol,
      'is_mobile'                 => (getlocations_is_mobile() ? 1 : 0),
      'js_path'                   => base_path() . GETLOCATIONS_PATH . '/js/',
      'images_path'               => base_path() . GETLOCATIONS_PATH . '/images/',
      'info_path'                 => url("getlocations_cb/info"),
      'lidinfo_path'              => url("getlocations_cb/lidinfo"),
     ),
  );

  if (isset($defaults['sv_group'])) {
    $settings[$mapid]['sv_addresscontrol']         = $defaults['sv_group']['sv_addresscontrol']; // sv overlay controls
    $settings[$mapid]['sv_addresscontrolposition'] = $defaults['sv_group']['sv_addresscontrolposition'];
    $settings[$mapid]['sv_pancontrol']             = $defaults['sv_group']['sv_pancontrol'];
    $settings[$mapid]['sv_pancontrolposition']     = $defaults['sv_group']['sv_pancontrolposition'];
    $settings[$mapid]['sv_zoomcontrol']            = $defaults['sv_group']['sv_zoomcontrol'];
    $settings[$mapid]['sv_zoomcontrolposition']    = $defaults['sv_group']['sv_zoomcontrolposition'];
    $settings[$mapid]['sv_linkscontrol']           = $defaults['sv_group']['sv_linkscontrol'];
    $settings[$mapid]['sv_imagedatecontrol']       = $defaults['sv_group']['sv_imagedatecontrol'];
    $settings[$mapid]['sv_scrollwheel']            = $defaults['sv_group']['sv_scrollwheel'];
    $settings[$mapid]['sv_clicktogo']              = $defaults['sv_group']['sv_clicktogo'];
  }
  else {
    $settings[$mapid]['sv_addresscontrol']         = 1; # $defaults['sv_addresscontrol']; // sv overlay controls
    $settings[$mapid]['sv_addresscontrolposition'] = ""; #$defaults['sv_addresscontrolposition'];
    $settings[$mapid]['sv_pancontrol']             = 1; #$defaults['sv_pancontrol'];
    $settings[$mapid]['sv_pancontrolposition']     = ""; #$defaults['sv_pancontrolposition'];
    $settings[$mapid]['sv_zoomcontrol']            = "default"; #$defaults['sv_zoomcontrol'];
    $settings[$mapid]['sv_zoomcontrolposition']    = ""; #$defaults['sv_zoomcontrolposition'];
    $settings[$mapid]['sv_linkscontrol']           = 1; #$defaults['sv_linkscontrol'];
    $settings[$mapid]['sv_imagedatecontrol']       = 0; #$defaults['sv_imagedatecontrol'];
    $settings[$mapid]['sv_scrollwheel']            = 1; #$defaults['sv_scrollwheel'];
    $settings[$mapid]['sv_clicktogo']              = 1; #$defaults['sv_clicktogo'];
  }

  // only set these if wanted
  $kml_group = $defaults['kml_group'];
  if ($kml_group['kml_url']) {
    $settings[$mapid]['kml_url_click']        = $kml_group['kml_url_click'];
    $settings[$mapid]['kml_url_infowindow']   = $kml_group['kml_url_infowindow'];
    $settings[$mapid]['kml_url_viewport']     = $kml_group['kml_url_viewport'];
    $settings[$mapid]['kml_url_button']       = $kml_group['kml_url_button'];
    $settings[$mapid]['kml_url_button_label'] = $kml_group['kml_url_button_label'];
    $settings[$mapid]['kml_url_button_state'] = $kml_group['kml_url_button_state'];
  }
  $search_places_group = $defaults['search_places_group'];
  if ($search_places_group['search_places']) {
    $settings[$mapid]['search_places_size']        = $search_places_group['search_places_size'];
    $settings[$mapid]['search_places_position']    = $search_places_group['search_places_position'];
    $settings[$mapid]['search_places_label']       = $search_places_group['search_places_label'];
    $settings[$mapid]['search_places_placeholder'] = $search_places_group['search_places_placeholder'];
    $settings[$mapid]['search_places_dd']          = $search_places_group['search_places_dd'];
    $settings[$mapid]['search_places_list']        = $search_places_group['search_places_list'];
  }
  if ($defaults['geojson_enable']) {
    $settings[$mapid]['geojson_data']    = $defaults['geojson_data'];
    $settings[$mapid]['geojson_options'] = $defaults['geojson_options'];
  }

  // categories
  if ($defaults['categories']) {
    $settings[$mapid]['categories'] = $defaults['categories'];
  }
  else {
    $settings[$mapid]['categories'] = array();
  }

  // highlighting
  $highlight_group = $defaults['highlight_group'];
  $settings[$mapid]['highlight_enable'] = $highlight_group['highlight_enable'];
  if ($highlight_group['highlight_enable']) {
    if (! preg_match("/^#/", $highlight_group['highlight_strokecolor'])) {
      $highlight_group['highlight_strokecolor'] = '#' . $highlight_group['highlight_strokecolor'];
    }
    if (! preg_match("/^#/", $highlight_group['highlight_fillcolor'])) {
      $highlight_group['highlight_fillcolor'] = '#' . $highlight_group['highlight_fillcolor'];
    }
    $settings[$mapid]['highlight_strokecolor']   = $highlight_group['highlight_strokecolor'];
    $settings[$mapid]['highlight_strokeopacity'] = $highlight_group['highlight_strokeopacity'];
    $settings[$mapid]['highlight_strokeweight']  = $highlight_group['highlight_strokeweight'];
    $settings[$mapid]['highlight_fillcolor']     = $highlight_group['highlight_fillcolor'];
    $settings[$mapid]['highlight_fillopacity']   = $highlight_group['highlight_fillopacity'];
    $settings[$mapid]['highlight_radius']        = $highlight_group['highlight_radius'];
  }

  $settings[$mapid]['getdirections_link']        = $defaults['getdirections_link'];
  $settings[$mapid]['show_search_distance']      = $defaults['show_search_distance'];
  $views_search_group = $defaults['views_search_group'];
  $settings[$mapid]['views_search_marker_enable']            = $views_search_group['views_search_marker_enable'];
  $settings[$mapid]['views_search_radshape_enable']          = $views_search_group['views_search_radshape_enable'];
  $settings[$mapid]['views_search_center']                   = $views_search_group['views_search_center'];
  if ($views_search_group['views_search_marker_enable'] || $views_search_group['views_search_radshape_enable']) {
    $settings[$mapid]['views_search_marker']                 = $views_search_group['views_search_marker'];
    $settings[$mapid]['views_search_marker_toggle']          = $views_search_group['views_search_marker_toggle'];
    $settings[$mapid]['views_search_marker_toggle_active']   = $views_search_group['views_search_marker_toggle_active'];
    $settings[$mapid]['views_search_radshape_strokecolor']   = $views_search_group['views_search_radshape_strokecolor'];
    $settings[$mapid]['views_search_radshape_strokeopacity'] = $views_search_group['views_search_radshape_strokeopacity'];
    $settings[$mapid]['views_search_radshape_strokeweight']  = $views_search_group['views_search_radshape_strokeweight'];
    $settings[$mapid]['views_search_radshape_fillcolor']     = $views_search_group['views_search_radshape_fillcolor'];
    $settings[$mapid]['views_search_radshape_fillopacity']   = $views_search_group['views_search_radshape_fillopacity'];
    $settings[$mapid]['views_search_radshape_toggle']        = $views_search_group['views_search_radshape_toggle'];
    $settings[$mapid]['views_search_radshape_toggle_active'] = $views_search_group['views_search_radshape_toggle_active'];
  }

  // geocoder-js
  $settings[$mapid]['geocoder_enable'] = $defaults['geocoder_enable'];

  // w3w
  $what3words = getlocations_w3w_settings();
  $what3words_lic = $what3words['what3words_lic'];
#  $what3words_group = $what3words['what3words_group'];
  $what3words_group = $defaults['what3words_group'];

  if ($what3words_lic['key'] && $what3words_group['what3words_enable']) {
    #$settings[$mapid]['what3words_key'] = $what3words_lic['key'];
    $settings[$mapid]['what3words_enable']      = $what3words_group['what3words_enable'];
    $settings[$mapid]['what3words_search']      = $what3words_group['what3words_search'];
    $settings[$mapid]['what3words_size']        = $what3words_group['what3words_size'];
    $settings[$mapid]['what3words_map_marker']  = $what3words_group['what3words_map_marker'];
    $settings[$mapid]['what3words_center']      = $what3words_group['what3words_center'];
    $settings[$mapid]['what3words_zoom']        = $what3words_group['what3words_zoom'];
    $settings[$mapid]['what3words_show']        = $what3words_group['what3words_show'];
    $settings[$mapid]['what3words_marker_show'] = $what3words_group['what3words_marker_show'];
    $settings[$mapid]['what3words_click']       = $what3words_group['what3words_click'];
    #$settings[$mapid]['what3words_path']        = url($what3words_group['what3words_path']);
    $settings[$mapid]['what3words_path']        = url($what3words['what3words_group']['what3words_path']);
  }

  // baselayer settings
  $providers = getlocations_get_map_providers();
  $baselayers = $defaults['baselayers'];
  foreach ($providers AS $k => $v) {
    if (isset($baselayers[$k]) && $baselayers[$k]) {
      $settings[$mapid]['baselayer_settings'][$k] = $v;
    }
  }

  // field group support;
  $settings[$mapid]['field_group_enable'] = (module_exists('field_group') ? 1 : 0);

  backdrop_add_js(array('getlocations' => $settings), 'setting');

  if ($defaults['preload_data']) {
    $info = array();
    if (count($latlons)) {
      $ct = 0;
      foreach ($latlons AS $latlon) {
        $info[$ct]['lid'] = 0;
        $info[$ct]['lidkey'] = '';
        $info[$ct]['content'] = '';
        if (isset($latlon[2]) && isset($latlon[5])) {
          $info[$ct]['lid'] = $latlon[2];
          $info[$ct]['lidkey'] = $latlon[5];
          $info[$ct]['content'] = '';
          if ($defaults['markeraction'] == 1 || $defaults['markeraction'] == 2) {
            $extra = FALSE;
            $extra['gdlink'] = $defaults['getdirections_link'];
            $info[$ct]['content'] = getlocations_getinfo($latlon[2], $latlon[5], $extra);
          }
          elseif ($defaults['markeraction'] == 3) {
            $info[$ct]['content'] = getlocations_getlidinfo($latlon[2], $latlon[5]);
          }
        }
        $ct++;
      }
    }
    $info_settings = array(
      $mapid => $info,
    );
    backdrop_add_js(array('getlocations_info' => $info_settings), 'setting');
  }

  // polygons
  $polygons_group = $defaults['polygons_group'];
  if ($polygons_group['polygons_enable'] && ! empty($polygons_group['polygons_coords'])) {
    $polygons = getlocations_get_polygon_settings($polygons_group);
    if ($polygons) {
      $polygon_settings = array(
        $mapid => $polygons,
      );
      backdrop_add_js(array('getlocations_polygons' => $polygon_settings), 'setting');
    }
  }
  // rectangles
  $rectangles_group = $defaults['rectangles_group'];
  if ($rectangles_group['rectangles_enable'] && (! empty($rectangles_group['rectangles_coords']) || ($rectangles_group['rectangles_apply'] && $rectangles_group['rectangles_dist']))) {
    if ($rectangles_group['rectangles_apply'] && $rectangles_group['rectangles_dist']) {
      // get latlons and set coords
      $tmp = '';
      foreach ($latlons AS $ll) {
        $lats = getlocations_earth_latitude_range($ll[0], $ll[1], $rectangles_group['rectangles_dist']);
        $lngs = getlocations_earth_longitude_range($ll[0], $ll[1], $rectangles_group['rectangles_dist']);
        $tmp .= $lats[0] . ',' . $lngs[0] . '|' . $lats[1] . ',' . $lngs[1] . "\n";
      }
      if ($tmp) {
        $rectangles_group['rectangles_coords'] = $tmp;
      }
    }
    $rectangles = getlocations_get_rectangle_settings($rectangles_group);
    if ($rectangles) {
      $rectangle_settings = array(
        $mapid => $rectangles,
      );
      backdrop_add_js(array('getlocations_rectangles' => $rectangle_settings), 'setting');
    }
  }
  // circles
  $circles_group = $defaults['circles_group'];
  if ($circles_group['circles_enable'] && $circles_group['circles_radius'] > 0 && (! empty($circles_group['circles_coords']) || $circles_group['circles_apply'])) {
    if ($circles_group['circles_apply'] && count($latlons)) {
      // get latlons and set coords
      $tmp = '';
      foreach ($latlons AS $ll) {
        $tmp .= $ll[0] . ',' . $ll[1] . "\n";
      }
      if ($tmp) {
        $circles_group['circles_coords'] = $tmp;
      }
    }
    $circles = getlocations_get_circle_settings($circles_group);
    if ($circles) {
      $circle_settings = array(
        $mapid => $circles,
      );
      backdrop_add_js(array('getlocations_circles' => $circle_settings), 'setting');
    }
  }
  // polylines
  $polylines_group = $defaults['polylines_group'];
  if ($polylines_group['polylines_enable'] && ! empty($polylines_group['polylines_coords'])) {
    $polylines = getlocations_get_polyline_settings($polylines_group);
    if ($polylines) {
      $polyline_settings = array(
        $mapid => $polylines,
      );
      backdrop_add_js(array('getlocations_polylines' => $polyline_settings), 'setting');
    }
  }

  // getlocations_gps
  if (module_exists('getlocations_gps')) {
    if ($defaults['gps_button']) {
      getlocations_gps_js_settings_do($defaults, $mapid);
    }
  }

  // getlocations_smartip
  if (module_exists('getlocations_smartip')) {
    $getlocations_smartip_defaults = getlocations_smartip_defaults();
    if ($getlocations_smartip_defaults['smartip_button']) {
      getlocations_smartip_js_settings_do($getlocations_smartip_defaults, $mapid);
    }
  }

}

/**
 * Function to fetch locations
 *
 * @param int $id The entity identifier
 *
 * @return array $locations
 *
 */
function getlocations_load_locations($id, $key = 'vid') {
  $locations = '';
  if (module_exists('getlocations_fields')) {
    $locations = getlocations_fields_load_locations($id, $key);
  }
  return $locations;
}

/**
 * Function to fetch a location
 *
 * @param int $lid Location Identifier
 *
 * @return array $location
 *
 */
function getlocations_load_location($lid) {
  $getlocations_defaults = getlocations_defaults();
  $location = '';
  if (module_exists('getlocations_fields')) {
    $location = getlocations_fields_load_location($lid);
    $type = getlocations_get_type_from_lid($lid);
    if (! isset($location['marker']) || empty($location['marker'])) {
      $location['marker'] = $getlocations_defaults[$type . '_map_marker'];
    }
  }
  return $location;
}

/**
 * Some form helper functions
 * for admin and views plugin style
 */
/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_marker($title, $options, $default, $description='') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#options' => $options,
    '#default_value' => $default,
  );
  if ($description) {
    $element['#description'] = $description;
  }
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_tf($title, $default, $description='', $size=60, $maxlength=255, $required=FALSE, $weight='') {

  $element = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default,
    '#size' => $size,
    '#maxlength' => $maxlength,
  );
  if ($required) {
    $element['#required'] = TRUE;
  }
  if ($description) {
    $element['#description'] = $description;
  }
  if (is_numeric($weight)) {
    $element['#weight'] = $weight;
  }

  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_zoom($title, $default, $description='') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#default_value' => $default,
    '#options' => backdrop_map_assoc(range(0, 21)),
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_zoom_map($title, $default, $description='') {

  $opts = array('-1' => t('Use map type settings')) + backdrop_map_assoc(range(0, 21));
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#default_value' => $default,
    '#options' => $opts,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_zoom_controltype($default, $title = '') {

  if (empty($title)) {
    $title = t('Zoom Control type');
  }
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#options' => array(
      'none' => t('None'),
      'default' => t('Default'),
#      'small' => t('Small'),
#      'large' => t('Large'),
    ),
    '#default_value' => $default,
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_checkbox($title, $default, $description='') {

  $element = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#default_value' => $default,
    '#return_value' => 1,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_mtc($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Map Control Type'),
    '#options' => array(
      'none' => t('None'),
      'standard' => t('Horizontal bar'),
      'menu' => t('Dropdown'),
    ),
    '#default_value' => $default,
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_maptype($default, $baselayers) {
  $options = array();
  $providers = getlocations_get_map_providers();
  $layers = array();
  foreach ($providers AS $k => $v) {
    $layers[$k] = $v['title'];
  }
  foreach ($layers AS $key => $layer) {
    if (isset($baselayers[$key]) && $baselayers[$key]) {
      $options[$key] = $layer;
    }
  }
  $element = array(
    '#type' => 'select',
    '#title' => t('Default map type'),
    '#options' => $options,
    '#default_value' => $default,
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_baselayers($view, $default) {
  // Map Satellite Hybrid Physical
  $title = FALSE;
  $providers = getlocations_get_map_providers();
  if (isset($providers[$view])) {
    $title = $providers[$view]['title'];
    $description = $providers[$view]['description'];
  }
  if ($title) {
    $element = getlocations_element_map_checkbox($title, $default, $description);
    return $element;
  }
  return FALSE;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_pansetting($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Automatic Panning'),
    '#default_value' => $default,
    '#options' => array(0 => t('None'), 1 => t('Pan'), 2 => t('Pan and zoom'), 3 => t('Set Center')),
    '#description' => t("'None' is No panning,") . '<br />' . t("'Pan' keeps the markers in the Viewport,") . '<br />' . t("'Pan and zoom' fits the markers to the Viewport,") . '<br />' . t("'Set Center' places the markers in the middle of the map."),
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_markeraction($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker action'),
    '#default_value' => $default,
    '#options' => array(
      0 => t('None'),
      1 => t('InfoWindow'),
      2 => t('InfoBubble'),
      3 => t('Link')),
    '#description' => t("'None' is No action,") . '<br />' . t("'InfoWindow' show information in a Google InfoWindow,") . '<br />' . t("'InfoBubble' use InfoBubble instead,") . '<br />' . t("'Link' go to a page."),
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_markeractiontype($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker action type'),
    '#default_value' => $default,
    '#options' => array(
      1 => t('Click'),
      2 => t('Mouse over')),
    '#description' => t("'Click' is clicking on the marker,") . '<br />' . t("'Mouse over' is holding the mouse over a marker."),
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_markermanagertype($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker Manager type'),
    '#default_value' => $default,
    '#options' => array(
      0 => t('None'),
      2 => t('Marker Clusterer'),
      1 => t('Marker Manager'),
    ),
    '#description' => t('The type of marker management software to load, if any.'),
  );
  return $element;
}


/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_path($title, $default, $size, $maxlength, $description) {
  $element = getlocations_element_map_tf(
    $title,
    $default,
    $description,
    $size,
    $maxlength,
    TRUE
  );
  return $element;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_map_limits($default, $title = '', $description = '') {

  if (empty($title)) {
    $title = t('Locations to show');
  }
  if (empty($description)) {
    $description = t('The maximum number of locations to show, sorted by distance');
  }
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#description' => $description,
    '#options' => array(0 => t('All'), 10 => '10', 20 => '20', 30 => '30', 40 => '40', 50 => '50', 75 => '75',
      100 => '100', 150 => '150', 175 => '175', 200 => '200', 250 => '250', 300 => '300', 400 => '400', 500 => '500',
    ),
    '#default_value' => $default,
  );

  return $element;

}

/**
 * @param string $default
 * @param string $title
 * @param array $options
 * @param string $description
 * @param bool $multiple
 * @param int $weight
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_dd($title, $default, $options, $description = '', $multiple = FALSE, $weight = '') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#default_value' => $default,
    '#options' => $options,
  );
  if ($description) {
    $element['#description'] = $description;
  }
  if ($multiple) {
    $element['#multiple'] = TRUE;
    $element['#size'] = min(12, count($options));
  }
  if (is_numeric($weight)) {
    $element['#weight'] = $weight;
  }
  return $element;
}

/*
function getlocations_form_validate_number_positive(&$element, &$form_state) {
  $value = $element['#value'];
  if ($value === '') {
    return;
  }

  $name = empty($element['#title']) ? $element['#parents'][0] : $element['#title'];

  // Ensure the input is numeric.
  if (!is_numeric($value)) {
    form_error($element, t('%name must be a number.', array('%name' => $name)));
    return;
  }

  // Ensure that the input is greater than the #min property, if set.
  if (isset($element['#min']) && $value < $element['#min']) {
    form_error($element, t('%name must be higher or equal to %min.', array('%name' => $name, '%min' => $element['#min'])));
  }

  // Ensure that the input is less than the #max property, if set.
  if (isset($element['#max']) && $value > $element['#max']) {
    form_error($element, t('%name must be below or equal to %max.', array('%name' => $name, '%max' => $element['#max'])));
  }

  if (isset($element['#step']) && strtolower($element['#step']) != 'any') {
    // Check that the input is an allowed multiple of #step (offset by #min if
    // #min is set).
    $offset = isset($element['#min']) ? $element['#min'] : 0.0;

    if (!valid_number_step($value, $element['#step'], $offset)) {
      form_error($element, t('%name is not a valid number.', array('%name' => $name)));
    }
  }
}
*/

function getlocations_get_map_providers() {
  // support hook_getlocations_map_providers
  $providers = module_invoke_all('getlocations_map_providers');
  return $providers;
}

## now in config/getlocations.map_providers.json
function getlocations_getlocations_map_providers() {
  $providers_raw = config('getlocations.map_providers');
  $providers = array();
  $getlocations_defaults = getlocations_defaults();
  $baselayers = $getlocations_defaults['baselayers'];
  foreach ($baselayers AS $baselayer => $v) {
    $providers[$baselayer] = $providers_raw->get($baselayer);
  }
  return $providers;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form
 *
 */
function getlocations_map_display_basics_form($defaults, $labels = array()) {
  $label = array(
    'width' => t('Default width'),
    'height' => t('Default height'),
    'styles' => t('Default styles'),
    'latlong' => t('Map center'),
    'zoom' => t('Zoom'),
    'minzoom_map' => t('Minimum Zoom'),
    'maxzoom_map' => t('Maximum Zoom'),
  );
  if (isset($labels['width'])) {
    $label['width'] = $labels['width'];
  }
  if (isset($labels['height'])) {
    $label['height'] = $labels['height'];
  }
  if (isset($labels['styles'])) {
    $label['styles'] = $labels['styles'];
  }
  if (isset($labels['latlong'])) {
    $label['latlong'] = $labels['latlong'];
  }
  if (isset($labels['zoom'])) {
    $label['zoom'] = $labels['zoom'];
  }
  if (isset($labels['minzoom_map'])) {
    $label['minzoom_map'] = $labels['minzoom_map'];
  }
  if (isset($labels['maxzoom_map'])) {
    $label['maxzoom_map'] = $labels['maxzoom_map'];
  }

  $form = array();
  $form['width'] = getlocations_element_map_tf(
    $label['width'],
    $defaults['width'],
    t('The default width of a map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
    10,
    10,
    TRUE
  );

  $form['height'] = getlocations_element_map_tf(
    $label['height'],
    $defaults['height'],
    t('The default height of a map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
    10,
    10,
    TRUE
  );

  // map_resize
  $form['map_resize'] = getlocations_element_map_checkbox(
    t('Automatic map resize'),
    $defaults['map_resize'],
    t('Set the map dimensions to 100% if the browser is on a mobile device.')
  );
  // fullscreen_disable
  $form['fullscreen_disable'] = getlocations_element_map_checkbox(
    t('Disable Fullscreen'),
    $defaults['fullscreen_disable'],
    t('Disable the Fullscreen button if the browser is on a mobile device.')
  );

  $form['styles'] = array(
    '#type' => 'textarea',
    '#title' => $label['styles'],
    '#default_value' => $defaults['styles'],
    '#description' => t('The default styles of a Google map. Use !link for generating your styles', array('!link' => l(t('this wizard'), 'http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html', array('external' => TRUE)))),
  );

  $form['latlong'] = getlocations_element_map_tf(
    $label['latlong'],
    $defaults['latlong'],
    t('The default center coordinates of a map, expressed as a decimal latitude and longitude, separated by a comma. This must not be 0,0'),
    40,
    50,
    TRUE
  );

  $form['zoom'] = getlocations_element_map_zoom(
    $label['zoom'],
    $defaults['zoom'],
    t('The default zoom level of a map.')
  );
  $form['minzoom_map'] = getlocations_element_map_zoom_map(
    $label['minzoom_map'],
    $defaults['minzoom_map'],
    t('The default Minimum zoom level of a map.')
  );
  $form['maxzoom_map'] = getlocations_element_map_zoom_map(
    $label['maxzoom_map'],
    $defaults['maxzoom_map'],
    t('The default Maximum zoom level of a map.')
  );

  return $form;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns form
 *
 */
function getlocations_map_display_options_form($defaults, $config = TRUE, $extras = TRUE, $source = '') {

  $controlpositions = getlocations_controlpositions();

  $form = array();
  $form['controltype'] = getlocations_element_map_zoom_controltype($defaults['controltype']);
  $form['controltype']['#suffix'] = '<div id="wrap-getlocations-zoomcontrol">';
  $form['zoomcontrolposition'] = getlocations_element_dd(
    t('Position of Zoom Control'),
    $defaults['zoomcontrolposition'],
    $controlpositions
  );
  $form['zoomcontrolposition']['#suffix'] = '</div>';

  $form['mtc'] = getlocations_element_map_mtc($defaults['mtc']);
  $form['mtc']['#suffix'] = '<div id="wrap-getlocations-mapcontrol">';
  $form['mapcontrolposition'] = getlocations_element_dd(
    t('Position of Map Control'),
    $defaults['mapcontrolposition'],
    $controlpositions
  );
  $form['mapcontrolposition']['#suffix'] = '</div>';

  $map_providers = config("getlocations.map_providers");
  $baselayers = $defaults['baselayers'];

  // make sure at least one layer is set
  $found = FALSE;
  foreach ($baselayers AS $key => $value) {
    if ($value) {
      $found = TRUE;
    }
  }
  if (! $found) {
    $baselayers['Map'] = 1;
    $maptype = 'Map';
  }


  // maptype
  if (! isset($maptype)) {
    $maptype = $defaults['maptype'];
  }
  $form['maptype'] = getlocations_element_map_maptype($maptype, $baselayers);
  $form['baselayers'] =  array(
    '#type' => 'fieldset',
    '#title' => t('Enable map types'),
    '#description' => t('Select which maps you want to be available.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  foreach ($baselayers AS $key => $value) {
    $layer = getlocations_element_map_baselayers($key, $value);
    if ($layer) {
      $form['baselayers'][$key] = $layer;
    }
  }

  $form['scale'] = getlocations_element_map_checkbox(
    t('Scale'),
    $defaults['scale'],
    t('Show scale.')
  );
  $form['scale']['#suffix'] = '<div id="wrap-getlocations-scale">';
  $form['scalecontrolposition'] = getlocations_element_dd(
    t('Position of Scale Control'),
    $defaults['scalecontrolposition'],
    $controlpositions
  );
  $form['scalecontrolposition']['#suffix'] = '</div>';

  $form['scrollwheel'] = getlocations_element_map_checkbox(
    t('Scrollwheel'),
    $defaults['scrollwheel'],
    t('Enable scrollwheel zooming.')
  );

  $form['draggable'] = getlocations_element_map_checkbox(
    t('Draggable'),
    $defaults['draggable'],
    t('Enable dragging the map.')
  );

  $form['nokeyboard'] = getlocations_element_map_checkbox(
    t('Disable keyboard shortcuts'),
    $defaults['nokeyboard'],
    t('Enabling this will disable keyboard shortcuts on the map.')
  );
  $form['nodoubleclickzoom'] = getlocations_element_map_checkbox(
    t('Disable Doubleclick zoom'),
    $defaults['nodoubleclickzoom'],
    t('Enabling this will disable doubleclick zooming on the map.')
  );

  $form['map_backgroundcolor'] = getlocations_element_map_tf(
    t('Map background color'),
    $defaults['map_backgroundcolor'],
    t('Can be a color name or HTML hex, eg #FF0000. Leave empty for the default color.'),
    10
  );

  if ($config) {

    $form['region_bias'] = getlocations_element_dd(
      t('Regional bias'),
      $defaults['region_bias'],
      array('' => t('None')) + getlocations_get_countries_list(),
      t('Bias the maps to a particular country')
    );

    $form['is_https'] = getlocations_element_map_checkbox(
      t('Force https maps'),
      $defaults['is_https']
    );

  }

  if ($extras) {

    // getlocations_gps
    if (module_exists('getlocations_gps')) {
      $getlocations_gps_defaults = getlocations_gps_defaults();
      // overwite these with settings found in $defaults
      foreach ($getlocations_gps_defaults AS $k => $v) {
        if (! isset($defaults[$k])) {
          $defaults[$k] = $v;
        }
      }
      $form += getlocations_gps_map_display_options_form($defaults);

      $form['geolocation_mobile_check'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable check for mobiles'),
        '#default_value' => $defaults['geolocation_mobile_check'],
        '#return_value' => 1,
        '#description' => t('Enable geolocation for mobile devices only.'),
      );
    }
    else {
      $form['geolocation_mobile_check'] = array('#type' => 'value', '#value' => 0);
    }

    // getlocations_smartip
    if (module_exists('getlocations_smartip')) {
      $getlocations_smartip_defaults = getlocations_smartip_defaults();
      $form += getlocations_smartip_map_display_options_form($getlocations_smartip_defaults);
    }

    // pegman
    $form['sv_show'] = getlocations_element_map_checkbox(
      t('Show streetview Pegman'),
      $defaults['sv_show']
    );
    $form['sv_show']['#suffix'] = '<div id="wrap-getlocations-sv-show">';
    $form['svcontrolposition'] = getlocations_element_dd(
      t('Position of Pegman'),
      $defaults['svcontrolposition'],
      $controlpositions
    );
    $form['svcontrolposition']['#suffix'] = '</div>';

    // show_maplinks
    $form['show_maplinks'] = getlocations_element_map_checkbox(
      t('Show map links'),
      $defaults['show_maplinks'],
      t('Show a list of links to popup InfoWindow/InfoBubble/Link on the map.')
    );
    $form['show_maplinks']['#suffix'] = '<div id="wrap-getlocations-maplinks">';
    $form['show_maplinks_viewport'] = getlocations_element_map_checkbox(
      t('Only Show map links in Viewport'),
      $defaults['show_maplinks_viewport']
    );
    $form['show_maplinks_viewport']['#suffix'] = '</div>';

    $form['show_bubble_on_one_marker'] = getlocations_element_map_checkbox(
      t('Show bubble automatically'),
      $defaults['show_bubble_on_one_marker'],
      t('Have the InfoWindow/InfoBubble popup automatically if there is only one marker on the map.')
    );

    $form['fullscreen'] = getlocations_element_map_checkbox(
      t('Show Fullscreen button'),
      $defaults['fullscreen']
    );
    $form['fullscreen']['#suffix'] = '<div id="wrap-getlocations-fs-show">';
    $form['fullscreen_controlposition'] = getlocations_element_dd(
      t('Position of Fullscreen button'),
      $defaults['fullscreen_controlposition'],
      $controlpositions
    );
    $form['fullscreen_controlposition']['#suffix'] = '</div>';

    $form['trafficinfo'] = getlocations_element_map_checkbox(
      t('Enable Traffic information'),
      $defaults['trafficinfo'],
      t('Google Traffic layer, limited availability.')
    );
    $form['trafficinfo']['#suffix'] = '<div id="wrap-getlocations-trafficinfo">';
    $form['trafficinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Traffic information'),
      $defaults['trafficinfo_state'],
      t('Activate Traffic layer when map is first displayed.')
    );
    $form['trafficinfo_state']['#suffix'] = '</div>';

    $form['bicycleinfo'] = getlocations_element_map_checkbox(
      t('Enable Bicycling information'),
      $defaults['bicycleinfo'],
      t('Google Bicycling layer, limited availability.')
    );
    $form['bicycleinfo']['#suffix'] = '<div id="wrap-getlocations-bicycleinfo">';
    $form['bicycleinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Bicycle information'),
      $defaults['bicycleinfo_state'],
      t('Activate Bicycling layer when map is first displayed.')
    );
    $form['bicycleinfo_state']['#suffix'] = '</div>';

    $form['transitinfo'] = getlocations_element_map_checkbox(
      t('Enable Public transport information'),
      $defaults['transitinfo'],
      t('Google Transit layer, limited availability.')
    );
    $form['transitinfo']['#suffix'] = '<div id="wrap-getlocations-transitinfo">';
    $form['transitinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Public transport information'),
      $defaults['transitinfo_state'],
      t('Activate Transit layer when map is first displayed.')
    );
    $form['transitinfo_state']['#suffix'] = '</div>';

    $form['poi_show'] = getlocations_element_map_checkbox(
      t('Show Points of Interest'),
      $defaults['poi_show'],
      t('Show Google points of interest icons.')
    );
    $form['transit_show'] = getlocations_element_map_checkbox(
      t('Show Transit Points'),
      $defaults['transit_show'],
      t('Show Google transit points icons.')
    );

    $form += getlocations_shapes_form($defaults, $source);
    $form += getlocations_kml_form($defaults);
    $form += getlocations_geojson_form($defaults);
    $form += getlocations_highlight_form($defaults);
    $form += getlocations_geocoder_form($defaults);
    $form += getlocations_google_places_form($defaults, $config);
    if ($defaults['what3words_lic']['key']) {
      $form += getlocations_what3words_form($defaults);
    }


    if ($config) {
      $form['places'] = array(
        '#type' => 'value',
        '#value' => $defaults['places'],
      );
    }

  }

  return $form;

}

function getlocations_shapes_form($defaults, $source) {
  $form = array();

  if (isset($defaults['polygons_group'])) {
    $polygons_group = $defaults['polygons_group'];
    $form['polygons_group'] = array('#type' => 'container');
    $form['polygons_group']['polygons_enable'] = getlocations_element_map_checkbox(
      t('Enable polygons'),
      $polygons_group['polygons_enable'],
      t('Show polygons if defined.')
    );
    $form['polygons_group']['polygons_enable']['#suffix'] = '<div id="wrap-getlocations-polygons">';

    $form['polygons_group']['polygons_strokecolor'] = getlocations_element_map_tf(
      t('Polygon line color'),
      $polygons_group['polygons_strokecolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['polygons_group']['polygons_strokeopacity'] = getlocations_element_map_tf(
      t('Polygon line opacity'),
      $polygons_group['polygons_strokeopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['polygons_group']['polygons_strokeweight'] = getlocations_element_map_tf(
      t('Polygon line thickness'),
      $polygons_group['polygons_strokeweight'],
      t('Must be an integer.'),
      10,
      10,
      TRUE
    );

    $form['polygons_group']['polygons_fillcolor'] = getlocations_element_map_tf(
      t('Polygon fill color'),
      $polygons_group['polygons_fillcolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['polygons_group']['polygons_fillopacity'] = getlocations_element_map_tf(
      t('Polygon fill opacity'),
      $polygons_group['polygons_fillopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['polygons_group']['polygons_clickable'] = getlocations_element_map_checkbox(
      t('Clickable'),
      $polygons_group['polygons_clickable'],
      t('Show Popup on clicking on the polygon.')
    );
    $form['polygons_group']['polygons_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Popup message'),
      '#default_value' => $polygons_group['polygons_message'],
      '#description' => t('The content of the popup.'),
    );

    $form['polygons_group']['polygons_coords'] = array(
      '#type' => 'textarea',
      '#title' => t('Polygon Coordinates'),
      '#default_value' => $polygons_group['polygons_coords'],
      '#description' => t('A pipe delimited list of latitude,longitude pairs, one polygon per line. You must have at least 3 pairs for each polygon.'),
    );
    $form['polygons_group']['polygons_coords']['#suffix'] = '</div>';

  }

  // rectangles
  if (isset($defaults['rectangles_group'])) {
    $rectangles_group = $defaults['rectangles_group'];
    $form['rectangles_group'] = array('#type' => 'container');
    $form['rectangles_group']['rectangles_enable'] = getlocations_element_map_checkbox(
      t('Enable rectangles'),
      $rectangles_group['rectangles_enable'],
      t('Show rectangles if defined.')
    );
    $form['rectangles_group']['rectangles_enable']['#suffix'] = '<div id="wrap-getlocations-rectangles">';

    $form['rectangles_group']['rectangles_strokecolor'] = getlocations_element_map_tf(
      t('Rectangle line color'),
      $rectangles_group['rectangles_strokecolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['rectangles_group']['rectangles_strokeopacity'] = getlocations_element_map_tf(
      t('Rectangle line opacity'),
      $rectangles_group['rectangles_strokeopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['rectangles_group']['rectangles_strokeweight'] = getlocations_element_map_tf(
      t('Rectangle line thickness'),
      $rectangles_group['rectangles_strokeweight'],
      t('Must be an integer.'),
      10,
      10,
      TRUE
    );

    $form['rectangles_group']['rectangles_fillcolor'] = getlocations_element_map_tf(
      t('Rectangle fill color'),
      $rectangles_group['rectangles_fillcolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['rectangles_group']['rectangles_fillopacity'] = getlocations_element_map_tf(
      t('Rectangle fill opacity'),
      $rectangles_group['rectangles_fillopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['rectangles_group']['rectangles_clickable'] = getlocations_element_map_checkbox(
      t('Clickable'),
      $rectangles_group['rectangles_clickable'],
      t('Show Popup on clicking on the rectangle.')
    );
    $form['rectangles_group']['rectangles_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Popup message'),
      '#default_value' => $rectangles_group['rectangles_message'],
      '#description' => t('The content of the popup.'),
    );
    if ($source == 'getlocations_search') {
      $form['rectangles_group']['rectangles_apply'] = array('#type' => 'value', '#value' => 0);
      $form['rectangles_group']['rectangles_dist'] = array('#type' => 'value', '#value' => 0);
    }
    else {
      $form['rectangles_group']['rectangles_apply'] = getlocations_element_map_checkbox(
        t('Apply a rectangle to all locations'),
        $rectangles_group['rectangles_apply'],
        t('Draw a rectangle centered on all locations being displayed. These coordinates will be used instead of the ones below.')
      );
      $form['rectangles_group']['rectangles_dist'] = getlocations_element_map_tf(
        t('Rectangle distance'),
        $rectangles_group['rectangles_dist'],
        t("The distance from the center of the rectangle to the edge in meters on the Earth's surface. This will only be used if Apply a rectangle is enabled."),
        10,
        10,
        FALSE
      );
    }

    $form['rectangles_group']['rectangles_coords'] = array(
      '#type' => 'textarea',
      '#title' => t('Rectangle Coordinates'),
      '#default_value' => $rectangles_group['rectangles_coords'],
      '#description' => t('A pipe delimited list of latitude,longitude pairs, one rectangle per line. You must have exactly 2 pairs for each rectangle, south-west and north-east corners.'),
    );
    $form['rectangles_group']['rectangles_coords']['#suffix'] = '</div>';
  }

  // circles
  if (isset($defaults['circles_group'])) {
    $circles_group = $defaults['circles_group'];
    $form['circles_group'] = array('#type' => 'container');
    $form['circles_group']['circles_enable'] = getlocations_element_map_checkbox(
      t('Enable circles'),
      $circles_group['circles_enable'],
      t('Show circles if defined.')
    );
    $form['circles_group']['circles_enable']['#suffix'] = '<div id="wrap-getlocations-circles">';

    $form['circles_group']['circles_strokecolor'] = getlocations_element_map_tf(
      t('Circle line color'),
      $circles_group['circles_strokecolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['circles_group']['circles_strokeopacity'] = getlocations_element_map_tf(
      t('Circle line opacity'),
      $circles_group['circles_strokeopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['circles_group']['circles_strokeweight'] = getlocations_element_map_tf(
      t('Circle line thickness'),
      $circles_group['circles_strokeweight'],
      t('Must be an integer.'),
      10,
      10,
      TRUE
    );

    $form['circles_group']['circles_fillcolor'] = getlocations_element_map_tf(
      t('Circle fill color'),
      $circles_group['circles_fillcolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['circles_group']['circles_fillopacity'] = getlocations_element_map_tf(
      t('Circle fill opacity'),
      $circles_group['circles_fillopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['circles_group']['circles_radius'] = getlocations_element_map_tf(
      t('Circle radius'),
      $circles_group['circles_radius'],
      t("The radius in meters on the Earth's surface."),
      10,
      10,
      TRUE
    );
    $form['circles_group']['circles_clickable'] = getlocations_element_map_checkbox(
      t('Clickable'),
      $circles_group['circles_clickable'],
      t('Show Popup on clicking on the circle.')
    );
    $form['circles_group']['circles_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Popup message'),
      '#default_value' => $circles_group['circles_message'],
      '#description' => t('The content of the popup.'),
    );

    if ($source == 'getlocations_search') {
      $form['circles_group']['circles_apply'] = array('#type' => 'value', '#value' => 0);
    }
    else {
      $form['circles_group']['circles_apply'] = getlocations_element_map_checkbox(
        t('Apply a circle to all locations'),
        $circles_group['circles_apply'],
        t('Draw a circle centered on all locations being displayed. These coordinates will be used instead of the ones below.')
      );
    }

    $form['circles_group']['circles_coords'] = array(
      '#type' => 'textarea',
      '#title' => t('Circle Center'),
      '#default_value' => $circles_group['circles_coords'],
      '#description' => t('A latitude,longitude pair, one circle per line.'),
    );
    $form['circles_group']['circles_coords']['#suffix'] = '</div>';

  }

  // polylines
  if (isset($defaults['polylines_group'])) {
    $polylines_group = $defaults['polylines_group'];
    $form['polylines_group'] = array('#type' => 'container');
    $form['polylines_group']['polylines_enable'] = getlocations_element_map_checkbox(
      t('Enable polylines'),
      $polylines_group['polylines_enable'],
      t('Show polylines if defined.')
    );
    $form['polylines_group']['polylines_enable']['#suffix'] = '<div id="wrap-getlocations-polylines">';

    $form['polylines_group']['polylines_strokecolor'] = getlocations_element_map_tf(
      t('Polyline line color'),
      $polylines_group['polylines_strokecolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['polylines_group']['polylines_strokeopacity'] = getlocations_element_map_tf(
      t('Polyline line opacity'),
      $polylines_group['polylines_strokeopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['polylines_group']['polylines_strokeweight'] = getlocations_element_map_tf(
      t('Polyline line thickness'),
      $polylines_group['polylines_strokeweight'],
      t('Must be an integer.'),
      10,
      10,
      TRUE
    );
    $form['polylines_group']['polylines_clickable'] = getlocations_element_map_checkbox(
      t('Clickable'),
      $polylines_group['polylines_clickable'],
      t('Show Popup on clicking on the polyline.')
    );
    $form['polylines_group']['polylines_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Popup message'),
      '#default_value' => $polylines_group['polylines_message'],
      '#description' => t('The content of the popup.'),
    );

    $form['polylines_group']['polylines_coords'] = array(
      '#type' => 'textarea',
      '#title' => t('Polyline Coordinates'),
      '#default_value' => $polylines_group['polylines_coords'],
      '#description' => t('A pipe delimited list of latitude,longitude pairs, one set of polylines per line. You must have at least 2 pairs for each set.'),
    );
    $form['polylines_group']['polylines_coords']['#suffix'] = '</div>';

  }

  return $form;
}

function getlocations_shapes_settings() {
  $config = config_get('getlocations.settings', 'settings');
  $shapes['polygons_group'] = $config['polygons_group'];
  $shapes['rectangles_group'] = $config['rectangles_group'];
  $shapes['circles_group'] = $config['circles_group'];
  $shapes['polylines_group'] = $config['polylines_group'];
  return $shapes;
}

function getlocations_geojson_form($defaults) {
  // geojson

  $form = array();
  if (getlocations_get_geojson_path()) {
    $form['geojson_enable'] = getlocations_element_map_checkbox(
      t('Enable GeoJSON library'),
      $defaults['geojson_enable'],
      t('Show GeoJSON data if defined')
    );
    $form['geojson_enable']['#suffix'] = '<div id="wrap-getlocations-geojson-enable">';
    $form['geojson_data'] = array(
      '#type' => 'textarea',
      '#title' => t('GeoJSON data'),
      '#default_value' => $defaults['geojson_data'],
      '#description' => t('A GeoJSON object. For more information about GeoJSON see !u', array('!u' => l(t('geojson.org'), 'http://www.geojson.org/', array('attributes' => array('target' => '_blank'))))),
    );
    $form['geojson_options'] = array(
      '#type' => 'textarea',
      '#title' => t('GeoJSON options'),
      '#default_value' => $defaults['geojson_options'],
      '#description' => t('A JSON object.'),
    );
    $form['geojson_options']['#suffix'] = '</div>';
  }
  else {
    $form['geojson_enable'] = array('#type' => 'value', '#value' => 0);
    $form['geojson_data'] = array('#type' => 'value', '#value' => '');
    $form['geojson_options'] = array('#type' => 'value', '#value' => '');
  }
  return $form;

}

function getlocations_kml_form($defaults) {
  // KML
  $form = array();
  $kml_group = $defaults['kml_group'];
  $form['kml_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Kml file'),
    '#description' => t('Attach a kml file.'),
    '#collapsible' => TRUE,
    '#collapsed' => (empty($kml_group['kml_url']) ? TRUE : FALSE ),
    '#tree' => TRUE,
  );
  $form['kml_group']['kml_url'] = getlocations_element_map_tf(
    t('Kml url'),
    $kml_group['kml_url'],
    t('A full url to a publicly accessible kml file.')
  );
  $form['kml_group']['kml_url_click'] = getlocations_element_map_checkbox(
    t('Kml layer clickable'),
    $kml_group['kml_url_click']
  );
  $form['kml_group']['kml_url_infowindow'] = getlocations_element_map_checkbox(
    t('Suppress Kml layer InfoWindows'),
    $kml_group['kml_url_infowindow']
  );
  $form['kml_group']['kml_url_viewport'] = getlocations_element_map_checkbox(
    t('Preserve viewport'),
    $kml_group['kml_url_viewport']
  );
  $form['kml_group']['kml_url_button'] = getlocations_element_map_checkbox(
    t('Show toggle button'),
    $kml_group['kml_url_button']
  );
  $form['kml_group']['kml_url_button_label'] = getlocations_element_map_tf(
    t('Label for toggle button'),
    $kml_group['kml_url_button_label'],
    '',
    30
  );
  $form['kml_group']['kml_url_button_state'] = getlocations_element_map_checkbox(
    t('Activate Kml layer'),
    $kml_group['kml_url_button_state'],
    t('Activate Kml layer when map is first displayed.')
  );

  return $form;
}

function getlocations_highlight_form($defaults) {
  // marker highlighting
  $form = array();

  if (isset($defaults['highlight_group'])) {
    $highlight_group = $defaults['highlight_group'];
    $form['highlight_group'] = array('#type' => 'container');
    $form['highlight_group']['highlight_enable'] = getlocations_element_map_checkbox(
      t('Enable Marker highlighting'),
      $highlight_group['highlight_enable'],
      t('Highlight a marker with a circle on mouseover')
    );
    $form['highlight_group']['highlight_enable']['#suffix'] = '<div id="wrap-getlocations-highlight">';

    $form['highlight_group']['highlight_strokecolor'] = getlocations_element_map_tf(
      t('Highlight Circle line color'),
      $highlight_group['highlight_strokecolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['highlight_group']['highlight_strokeopacity'] = getlocations_element_map_tf(
      t('Highlight Circle line opacity'),
      $highlight_group['highlight_strokeopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['highlight_group']['highlight_strokeweight'] = getlocations_element_map_tf(
      t('Highlight Circle line thickness'),
      $highlight_group['highlight_strokeweight'],
      t('Must be an integer.'),
      10,
      10,
      TRUE
    );

    $form['highlight_group']['highlight_fillcolor'] = getlocations_element_map_tf(
      t('Highlight Circle fill color'),
      $highlight_group['highlight_fillcolor'],
      t('HTML hex, eg #FF0000.'),
      10,
      10,
      TRUE
    );

    $form['highlight_group']['highlight_fillopacity'] = getlocations_element_map_tf(
      t('Highlight Circle fill opacity'),
      $highlight_group['highlight_fillopacity'],
      t('Must be between 0 and 1.'),
      10,
      10,
      TRUE
    );
    $form['highlight_group']['highlight_radius'] = getlocations_element_map_tf(
      t('Highlight Circle size'),
      $highlight_group['highlight_radius'],
      t("The size of the highlight circle, 10 or 20 recommended."),
      5,
      5,
      TRUE
    );
    $form['highlight_group']['highlight_radius']['#suffix'] = '</div>';

  }
  return $form;
}

function getlocations_google_places_form($defaults, $config) {
  // search_places
  $form = array();
  if (isset($defaults['search_places_group'])) {
    $search_places_group = $defaults['search_places_group'];
    $form['search_places_group'] = array('#type' => 'container');
    // enable
    $desc = t('Provide a textfield to query Google Places Search.');
    if ($config) {
      $desc .= ' ' . t('This will be enabled for all Google maps if enabled here.');
    }
    $form['search_places_group']['search_places'] = getlocations_element_map_checkbox(
      t('Enable Google Places Search'),
      $search_places_group['search_places'],
      $desc
    );
    $form['search_places_group']['search_places']['#suffix'] = '<div id="wrap-getlocations-search-places">';
    // size
    $form['search_places_group']['search_places_size'] = getlocations_element_map_tf(
      t('Textbox width'),
      $search_places_group['search_places_size'],
      t('The width of the Google Places Search textbox. Must be a positive number.'),
      10,
      10,
      TRUE
    );
    // placement
    $pos = array(
      'outside_above' => t('Above the map'),
      'outside_below' => t('Below the map'),
    );
    $form['search_places_group']['search_places_position'] = getlocations_element_dd(
      t('Textbox Position'),
      $search_places_group['search_places_position'],
      $pos,
      t('The position of the Google Places Search textbox.')
    );
    // label
    $form['search_places_group']['search_places_label'] = getlocations_element_map_tf(
      t('Textbox label'),
      $search_places_group['search_places_label'],
      t('The label for the Google Places Search textbox.'),
      30,
      40
    );
    // placeholder
    $form['search_places_group']['search_places_placeholder'] = getlocations_element_map_tf(
      t('Text in Textbox'),
      $search_places_group['search_places_placeholder'],
      t('The text inside the Google Places Search textbox. Leave empty for the default.'),
      30,
      40
    );
    // list
    $form['search_places_group']['search_places_list'] = getlocations_element_map_checkbox(
      t('Provide a List of what was found linked to a bubble'),
      $search_places_group['search_places_list']
    );
    // dropdown
    $form['search_places_group']['search_places_dd'] = getlocations_element_map_checkbox(
      t('Provide a Dropdown instead of a Textbox for Google Places Search'),
      $search_places_group['search_places_dd']
    );
    $form['search_places_group']['search_places_dd']['#suffix'] = '</div>';

  }

  return $form;
}

function getlocations_geocoder_form($defaults) {
  $form = array();
  if (getlocations_get_geocoder_path()) {
    $form['geocoder_enable'] = getlocations_element_dd(
      t('Geocoder type'),
      $defaults['geocoder_enable'],
      array(0 => t('Quick Google Search'), 1 => t('Full Google Search'), 2 => t('OpenStreetMap Search')),
      t('The type of geocoder to use. Quick Google search only applies if Google Autocomplete has been used.')
    );
  }
  else {
    $form['geocoder_enable'] = array('#type' => 'value', '#value' => 0);
  }
  return $form;
}

function getlocations_markeraction_form($defaults) {
  $form = array();
  $form['markeractiontype'] = getlocations_element_map_markeractiontype($defaults['markeractiontype']);
  $form['markeraction'] = getlocations_element_map_markeraction($defaults['markeraction']);

  $form['markeraction_click_center'] = getlocations_element_dd(
    t('Center or Pan on Marker click'),
    $defaults['markeraction_click_center'],
    array(0 => t('None'), 1 => t('Center'), 2 => t('Pan to'))
  );

  $form['markeraction_click_zoom'] = array(
    '#type' => 'select',
    '#title' => t('Zoom on Marker click'),
    '#default_value' => $defaults['markeraction_click_zoom'],
    '#options' => array('-1' => t('None')) + backdrop_map_assoc(range(0, 21)),
  );

  return $form;
}

function getlocations_markermanager_form($defaults) {
  $form = array();
  $form['usemarkermanager'] = getlocations_element_map_checkbox(
    t('Use Marker manager'),
    $defaults['usemarkermanager'],
    t('Use Marker manager. Switching this off will use no manager.')
  );

  $form['minzoom'] = getlocations_element_map_zoom(
    t('Minimum Zoom'),
    $defaults['minzoom'],
    t('The Minimum zoom level at which markers will be visible.')
  );

  $form['maxzoom'] = getlocations_element_map_zoom(
    t('Maximum Zoom'),
    $defaults['maxzoom'],
    t('The Maximum zoom level at which markers will be visible.')
  );

  $form['usemarkermanager']['#prefix'] = '<div id="wrap-getlocations-markeropts">';
  $form['maxzoom']['#suffix'] = '</div>';

  return $form;
}

function getlocations_markercluster_form($defaults) {

  $form = array();
  if (isset($defaults['markerclusterer_group'])) {
    if (file_exists(GETLOCATIONS_PATH . '/getlocations.markercluster_override.inc')) {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster_override');
    }
    else {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster');
    }

    $markerclusterer_group = $defaults['markerclusterer_group'];

    $form['markerclusterer_group'] = array('#type' => 'container');
    $form['markerclusterer_group']['useclustermanager'] = getlocations_element_map_checkbox(
      t('Use Cluster manager'),
      $markerclusterer_group['useclustermanager'],
      t('Use Cluster manager. Switching this off will use no manager.')
    );
    $form['markerclusterer_group']['markerclusterer_style'] = getlocations_element_markerclusterer_style($markerclusterer_group['markerclusterer_style']);
    $form['markerclusterer_group']['markerclusterer_imgpath'] = getlocations_element_map_tf(
      t('Markerclusterer image path'),
      $markerclusterer_group['markerclusterer_imgpath'],
      '',
      40,
      255
    );
    $form['markerclusterer_group']['markerclusterer_title'] = getlocations_element_map_tf(
      t('Markerclusterer tooltip'),
      $markerclusterer_group['markerclusterer_title'],
      t('The text of a Markerclusterer tooltip'),
      30,
      64,
      TRUE
    );
    $form['markerclusterer_group']['markerclusterer_zoom'] = getlocations_element_markerclusterer_zoom($markerclusterer_group['markerclusterer_zoom']);
    $form['markerclusterer_group']['markerclusterer_size'] = getlocations_element_markerclusterer_size($markerclusterer_group['markerclusterer_size']);
    $form['markerclusterer_group']['markerclusterer_minsize'] = getlocations_element_markerclusterer_minsize($markerclusterer_group['markerclusterer_minsize']);

    $form['markerclusterer_group']['useclustermanager']['#suffix'] = '<div id="wrap-getlocations-clusteropts">';
    $form['markerclusterer_group']['markerclusterer_minsize']['#suffix'] = '</div>';

  }

  return $form;
}

/**
 * What3words config form
 *
 */
function getlocations_what3words_form($defaults) {

  $form = array();
  if (isset($defaults['what3words_lic']) && isset($defaults['what3words_group'])) {
    $what3words_lic = $defaults['what3words_lic'];
    $what3words_group = $defaults['what3words_group'];
    if ($what3words_lic['key']) {
      $form['what3words_group'] = array('#type' => 'container');
      $form['what3words_group']['what3words_enable'] = getlocations_element_map_checkbox(
        t('Enable what3words service'),
        $what3words_group['what3words_enable'],
        t('This service requires an API key')
      );
      $form['what3words_group']['what3words_enable']['#suffix'] = '<div id="wrap-getlocations-what3words">';
      // what3words_search
      $form['what3words_group']['what3words_search'] = getlocations_element_map_checkbox(
        t('Show what3words search box'),
        $what3words_group['what3words_search']
      );
      // what3words_size
      $form['what3words_group']['what3words_size'] = getlocations_element_map_tf(
        t('what3words search box width'),
        $what3words_group['what3words_size'],
        '',
        10
      );

      // what3words_marker_show
      $form['what3words_group']['what3words_marker_show'] = getlocations_element_map_checkbox(
        t('Display what3words marker'),
        $what3words_group['what3words_marker_show']
      );

      // what3words_map_marker
      $markers = getlocations_get_marker_titles();
      $form['what3words_group']['what3words_map_marker'] = getlocations_element_map_marker(
        t('what3words Map marker'),
        $markers,
        $what3words_group['what3words_map_marker']
      );
      // what3words_center
      $form['what3words_group']['what3words_center'] = getlocations_element_map_checkbox(
        t('Center map on what3words location'),
        $what3words_group['what3words_center'],
        t('Center the map on Search success')
      );
      // what3words_zoom
      $opts = array('-3' => t('Use what3words Bounds'), '-2' => t('Keep current zoom'), '-1' => t('Use map type settings')) + drupal_map_assoc(range(0, 21));
      $form['what3words_group']['what3words_zoom'] = array(
        '#type' => 'select',
        '#title' => t('Zoom for what3words location'),
        '#default_value' => $what3words_group['what3words_zoom'],
        '#options' => $opts,
      );
      // what3words_click
      $form['what3words_group']['what3words_click'] = getlocations_element_map_checkbox(
        t('Click on map to find what3words'),
        $what3words_group['what3words_click']
      );
      // what3words_show
      $form['what3words_group']['what3words_show'] = getlocations_element_map_checkbox(
        t('Display what3words for current location'),
        $what3words_group['what3words_show']
      );
      $form['what3words_group']['what3words_show']['#suffix'] = '</div>';
      $form['what3words_group']['what3words_path'] = array('#type' => 'value', '#value' => $what3words_group['what3words_path']);
    }
    else {
      $form['what3words_group']['what3words_enable'] = array('#type' => 'value', '#value' => 0);
      $form['what3words_group']['what3words_search'] = array('#type' => 'value', '#value' => $what3words_group['what3words_search']);
      $form['what3words_group']['what3words_size'] = array('#type' => 'value', '#value' => $what3words_group['what3words_size']);
      $form['what3words_group']['what3words_marker_show'] = array('#type' => 'value', '#value' => $what3words_group['what3words_marker_show']);
      $form['what3words_group']['what3words_map_marker'] = array('#type' => 'value', '#value' => $what3words_group['what3words_map_marker']);
      $form['what3words_group']['what3words_center'] = array('#type' => 'value', '#value' => $what3words_group['what3words_center']);
      $form['what3words_group']['what3words_zoom'] = array('#type' => 'value', '#value' => $what3words_group['what3words_zoom']);
      $form['what3words_group']['what3words_click'] = array('#type' => 'value', '#value' => $what3words_group['what3words_click']);
      $form['what3words_group']['what3words_show'] = array('#type' => 'value', '#value' => $what3words_group['what3words_show']);
      $form['what3words_group']['what3words_path'] = array('#type' => 'value', '#value' => $what3words_group['what3words_path']);
    }

  }


  return $form;
}

function getlocations_w3w_settings() {
  $settings = array();
  $group = getlocations_w3w_get_group();
  $settings['what3words_group'] = $group;
  $lic = getlocations_w3w_get_lic();
  $settings['what3words_lic'] = $lic;
  return $settings;
}

function getlocations_w3w_get_lic() {
  $settings = getlocations_defaults();
  return $settings['what3words_lic'];
}

function getlocations_w3w_get_group() {
  $settings = getlocations_defaults();
  return $settings['what3words_group'];
}

function getlocations_mapquest_get_lic() {
  $settings = getlocations_defaults();
  return $settings['mapquest_lic'];
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns array of javascript paths
 *
 */
function getlocations_paths_get($path) {
  $pathsall = getlocations_paths_get_all();
  return $pathsall[$path];
}

function getlocations_paths_get_all() {
  return config_get('getlocations.paths', 'paths');
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_markerpicker_link($id, $cat, $infoimg='') {
  if (module_exists('colorbox')) {
    $getlocations_colorbox = getlocations_colorbox_settings();
    if ($getlocations_colorbox['marker_enable']) {
      $boxwidth = $getlocations_colorbox['marker_width'];
      $boxheight = $getlocations_colorbox['marker_height'];
      if (empty($infoimg)) {
        $infoimg = '<img class="getlocations_infoimg" src="' . base_path() . GETLOCATIONS_PATH . '/images/info.png' . '" title="' . t('Click here to select an icon from a colorbox') . '" >';
      }
      $link = l($infoimg, 'getlocations/markerinfo', array(
          'attributes' => array(
            'class' => 'colorbox-load',
          ),
          'html' => TRUE,
          'query' => array('width' => $boxwidth, 'height' => $boxheight, 'iframe' => 'true', 'lt' => $id, 'cat' => $cat),
        )
      );
      return $link;
    }
  }
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_colorbox_settings() {
  $colorbox_defaults = array(
    'enable' => 0,
    'width' => 600,
    'height' => 600,
    'marker_enable' => 0,
    'marker_width' => 600,
    'marker_height' => 600,
  );
  $colorbox_settings =  config_get('getlocations_colorbox', $colorbox_defaults);
  $getlocations_colorbox = getlocations_adjust_vars($colorbox_defaults, $colorbox_settings);
  if (! module_exists('colorbox')) {
    $getlocations_colorbox['enable'] = 0;
    $getlocations_colorbox['marker_enable'] = 0;
  }
  return $getlocations_colorbox;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_polygon_settings($defaults) {
  $coords = preg_replace("/\r/", '', $defaults['polygons_group']['polygons_coords']);
  $coords_arr = preg_split("/\n/", $coords);
  $lla = array();
  $polygons = array();
  $ct = 0;

  if (! preg_match("/^#/",  $defaults['polygons_group']['polygons_strokecolor'])) {
    $defaults['polygons_group']['polygons_strokecolor'] = '#' . $defaults['polygons_group']['polygons_strokecolor'];
  }
  if (! preg_match("/^#/",  $defaults['polygons_group']['polygons_fillcolor'])) {
    $defaults['polygons_group']['polygons_fillcolor'] = '#' . $defaults['polygons_group']['polygons_fillcolor'];
  }

  foreach ($coords_arr AS $line) {
    $lla = array();
    // set defaults

    $polygons['polygons'][$ct]['strokeColor']   = $defaults['polygons_group']['polygons_strokecolor'];
    $polygons['polygons'][$ct]['strokeOpacity'] = $defaults['polygons_group']['polygons_strokeopacity'];
    $polygons['polygons'][$ct]['strokeWeight']  = $defaults['polygons_group']['polygons_strokeweight'];
    $polygons['polygons'][$ct]['fillColor']     = $defaults['polygons_group']['polygons_fillcolor'];
    $polygons['polygons'][$ct]['fillOpacity']   = $defaults['polygons_group']['polygons_fillopacity'];
    $polygons['polygons'][$ct]['clickable']     = $defaults['polygons_group']['polygons_clickable'];
    $polygons['polygons'][$ct]['message']       = $defaults['polygons_group']['polygons_message'];

    $linebits = explode("|", $line);
    foreach ($linebits AS $linebit) {
      if ($latlon = getlocations_latlon_check($linebit)) {
        $lla[] = $latlon;
      }
      else {
        // not a latlon so could be a setting
        if (preg_match("/strokeColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['strokeColor'] = trim($m);
        }
        elseif (preg_match("/strokeOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['strokeOpacity'] = trim($m);
        }
        elseif (preg_match("/strokeWeight:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['strokeWeight'] = trim($m);
        }
        elseif (preg_match("/fillColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['fillColor'] = trim($m);
        }
        elseif (preg_match("/fillOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['fillOpacity'] = trim($m);
        }
        elseif (preg_match("/clickable:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['clickable'] = trim($m);
        }
        elseif (preg_match("/message:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polygons['polygons'][$ct]['message'] = trim($m);
        }
      }
    }
    if (count($lla) > 2) {
      $polygons['polygons'][$ct]['coords'] = implode("|", $lla);
    }
    $ct++;
  }
  return $polygons;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_rectangle_settings($defaults) {
  $coords = preg_replace("/\r/", '', $defaults['rectangles_group']['rectangles_coords']);
  $coords_arr = preg_split("/\n/", $coords);
  $lla = array();
  $rectangles = array();
  $ct = 0;

  if (! preg_match("/^#/",  $defaults['rectangles_group']['rectangles_strokecolor'])) {
    $defaults['rectangles_group']['rectangles_strokecolor'] = '#' . $defaults['rectangles_group']['rectangles_strokecolor'];
  }
  if (! preg_match("/^#/",  $defaults['rectangles_group']['rectangles_fillcolor'])) {
    $defaults['rectangles_group']['rectangles_fillcolor'] = '#' . $defaults['rectangles_group']['rectangles_fillcolor'];
  }

  foreach ($coords_arr AS $line) {
    $lla = array();
    // set defaults
    $rectangles['rectangles'][$ct]['strokeColor']   = $defaults['rectangles_group']['rectangles_strokecolor'];
    $rectangles['rectangles'][$ct]['strokeOpacity'] = $defaults['rectangles_group']['rectangles_strokeopacity'];
    $rectangles['rectangles'][$ct]['strokeWeight']  = $defaults['rectangles_group']['rectangles_strokeweight'];
    $rectangles['rectangles'][$ct]['fillColor']     = $defaults['rectangles_group']['rectangles_fillcolor'];
    $rectangles['rectangles'][$ct]['fillOpacity']   = $defaults['rectangles_group']['rectangles_fillopacity'];
    $rectangles['rectangles'][$ct]['clickable']     = $defaults['rectangles_group']['rectangles_clickable'];
    $rectangles['rectangles'][$ct]['message']       = $defaults['rectangles_group']['rectangles_message'];

    $linebits = explode("|", $line);
    foreach ($linebits AS $linebit) {
      if ($latlon = getlocations_latlon_check($linebit)) {
        $lla[] = $latlon;
      }
      else {
        // not a latlon so could be a setting
        if (preg_match("/strokeColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['strokeColor'] = trim($m);
        }
        elseif (preg_match("/strokeOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['strokeOpacity'] = trim($m);
        }
        elseif (preg_match("/strokeWeight:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['strokeWeight'] = trim($m);
        }
        elseif (preg_match("/fillColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['fillColor'] = trim($m);
        }
        elseif (preg_match("/fillOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['fillOpacity'] = trim($m);
        }
        elseif (preg_match("/clickable:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['clickable'] = trim($m);
        }
        elseif (preg_match("/message:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $rectangles['rectangles'][$ct]['message'] = trim($m);
        }
      }
    }
    if (count($lla) == 2) {
      $rectangles['rectangles'][$ct]['coords'] = implode("|", $lla);
    }
    $ct++;
  }
  return $rectangles;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_circle_settings($defaults) {
  $coords = preg_replace("/\r/", '', $defaults['circles_group']['circles_coords']);
  $coords_arr = preg_split("/\n/", $coords);
  $lla = array();
  $circles = array();
  $ct = 0;

  if (! preg_match("/^#/",  $defaults['circles_group']['circles_strokecolor'])) {
    $defaults['circles_group']['circles_strokecolor'] = '#' . $defaults['circles_group']['circles_strokecolor'];
  }
  if (! preg_match("/^#/",  $defaults['circles_group']['circles_fillcolor'])) {
    $defaults['circles_group']['circles_fillcolor'] = '#' . $defaults['circles_group']['circles_fillcolor'];
  }

  foreach ($coords_arr AS $line) {
    $lla = array();
    // set defaults
    $circles['circles'][$ct]['strokeColor']   = $defaults['circles_group']['circles_strokecolor'];
    $circles['circles'][$ct]['strokeOpacity'] = $defaults['circles_group']['circles_strokeopacity'];
    $circles['circles'][$ct]['strokeWeight']  = $defaults['circles_group']['circles_strokeweight'];
    $circles['circles'][$ct]['fillColor']     = $defaults['circles_group']['circles_fillcolor'];
    $circles['circles'][$ct]['fillOpacity']   = $defaults['circles_group']['circles_fillopacity'];
    $circles['circles'][$ct]['clickable']     = $defaults['circles_group']['circles_clickable'];
    $circles['circles'][$ct]['message']       = $defaults['circles_group']['circles_message'];
    $circles['circles'][$ct]['radius']        = $defaults['circles_group']['circles_radius'];

    $linebits = explode("|", $line);
    foreach ($linebits AS $linebit) {
      if ($latlon = getlocations_latlon_check($linebit)) {
        $lla[] = $latlon;
      }
      else {
        // not a latlon so could be a setting
        if (preg_match("/strokeColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['strokeColor'] = trim($m);
        }
        elseif (preg_match("/strokeOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['strokeOpacity'] = trim($m);
        }
        elseif (preg_match("/strokeWeight:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['strokeWeight'] = trim($m);
        }
        elseif (preg_match("/fillColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['fillColor'] = trim($m);
        }
        elseif (preg_match("/fillOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['fillOpacity'] = trim($m);
        }
        elseif (preg_match("/clickable:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['clickable'] = trim($m);
        }
        elseif (preg_match("/message:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['message'] = trim($m);
        }
        elseif (preg_match("/radius:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $circles['circles'][$ct]['radius'] = trim($m);
        }
      }
    }
    if (count($lla) == 1) {
      $circles['circles'][$ct]['coords'] = $lla;
    }
    $ct++;
  }
  return $circles;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_polyline_settings($defaults) {
  $coords = preg_replace("/\r/", '', $defaults['polylines_group']['polylines_coords']);
  $coords_arr = preg_split("/\n/", $coords);
  $lla = array();
  $polylines = array();
  $ct = 0;

  if (! preg_match("/^#/",  $defaults['polylines_group']['polylines_strokecolor'])) {
    $defaults['polylines_group']['polylines_strokecolor'] = '#' . $defaults['polylines_group']['polylines_strokecolor'];
  }

  foreach ($coords_arr AS $line) {
    $lla = array();
    // set defaults
    $polylines['polylines'][$ct]['strokeColor']   = $defaults['polylines_group']['polylines_strokecolor'];
    $polylines['polylines'][$ct]['strokeOpacity'] = $defaults['polylines_group']['polylines_strokeopacity'];
    $polylines['polylines'][$ct]['strokeWeight']  = $defaults['polylines_group']['polylines_strokeweight'];
    $polylines['polylines'][$ct]['clickable']     = $defaults['polylines_group']['polylines_clickable'];
    $polylines['polylines'][$ct]['message']       = $defaults['polylines_group']['polylines_message'];

    $linebits = explode("|", $line);
    foreach ($linebits AS $linebit) {
      if ($latlon = getlocations_latlon_check($linebit)) {
        $lla[] = $latlon;
      }
      else {
        // not a latlon so could be a setting
        if (preg_match("/strokeColor:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polylines['polylines'][$ct]['strokeColor'] = trim($m);
        }
        elseif (preg_match("/strokeOpacity:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polylines['polylines'][$ct]['strokeOpacity'] = trim($m);
        }
        elseif (preg_match("/strokeWeight:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polylines['polylines'][$ct]['strokeWeight'] = trim($m);
        }
        elseif (preg_match("/clickable:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polylines['polylines'][$ct]['clickable'] = trim($m);
        }
        elseif (preg_match("/message:(.*)/", $linebit, $match)) {
          $m = $match[1];
          $polylines['polylines'][$ct]['message'] = trim($m);
        }
      }
    }
    if (count($lla) > 1) {
      $polylines['polylines'][$ct]['coords'] = implode("|", $lla);
    }
    $ct++;
  }
  return $polylines;
}

/**
 * Function to get the path to the GeoJSON library
 *
 * @param
 *
 * @return
 *   Returns string or false
 *
 */
function getlocations_get_geojson_path() {
  if ($geojsonpath = libraries_get_path('GeoJSON')) {
    return $geojsonpath . '/GeoJSON.js';
  }
  return FALSE;
}

/**
 * Function to get the path to the Geocoder-js library
 *
 * @param
 *
 * @return
 *   Returns string or false
 *
 */
function getlocations_get_geocoder_path() {
  if ($path = libraries_get_path('geocoder-js')) {
    return $path . '/geocoder.min.js';
  }
  return FALSE;
}

/**
 * Function to run string through check_plain but then restore apostrophes
 *
 * @param
 *
 * @return
 *   Returns string
 *
 */
function getlocations_apoclean($string) {
  $string = trim($string);
  $string = check_plain($string);
  return htmlspecialchars_decode($string, ENT_QUOTES);
}

/**
 * Recursively merge the defaults with the current settings
 *
 * @param array $defaults
 *
 * @param array $settings
 *
 * @return array The merged settings
 *
 */
function getlocations_adjust_vars($defaults, $settings) {
  $newdefaults = array();
  foreach ($defaults AS $k => $v) {
    if (isset($settings[$k])) {
      if (is_array($v)) {
        $newdefaults[$k] = getlocations_adjust_vars($v, $settings[$k]);
      }
      else {
        $newdefaults[$k] = $settings[$k];
      }
    }
    else {
      $newdefaults[$k] = $v;
    }
  }
  return $newdefaults;
}

/**
 * Fetch fieldnames for a given module and type
 *
 * @param array $module module name
 * @param array $type type name
 *
 * @return array suitable for use in a dropdown.
 */
// TODO
function getlocations_get_fieldnames($module = 'getlocations_fields', $type = 'getlocations_fields') {

  $field_names = array();

  $f_info = _field_info_collate_fields();
  $fields = $f_info['fields'];
  foreach ($fields AS $k => $v) {
    if ($v['type'] == $type && $v['module'] == $module && $v['active'] == 1) {
      $fieldnames[$v['field_name']] = $v['field_name'];
    }
  }

#  $query = db_select('field_config', 'f');
#  $query->fields('f', array('field_name'));
#  $query->join('field_config_instance', 'i', 'f.id=i.field_id');
#  $query->condition('f.module', $module)
#    ->condition('f.type', $type)
#    ->condition('f.active', 1);
#  $rows = $query->execute();
#  foreach ($rows AS $row) {
#    $field_names[$row->field_name] = $row->field_name;
#  }
  return $field_names;
}

/**
 * Fetch bundle names for a given module and type
 *
 * @param array $module module name
 * @param array $type type name
 *
 * @return array suitable for use in a dropdown.
 */
// TODO
function getlocations_get_bundles($module = 'getlocations_fields', $type = 'getlocations_fields') {

  $allbundles = array();
  $f_info = _field_info_collate_fields();
  $fields = $f_info['fields'];
  foreach ($fields AS $k => $v) {
    if ($v['type'] == $type && $v['module'] == $module && $v['active'] == 1) {
      if (isset($v['bundles'][$entity_type] )) {
        $bundles = $v['bundles'][$entity_type];
        $allbundles = array_merge($bundles, $allbundles);
      }
    }
  }

#  $query = db_select('field_config', 'f');
#  $query->fields('i', array('bundle'));
#  $query->join('field_config_instance', 'i', 'f.id=i.field_id');
#  $query->condition('f.module', $module)
#    ->condition('f.type', $type)
#    ->condition('f.active', 1);
#  $rows = $query->execute();
#  foreach ($rows AS $row) {
#    $bundles[$row->bundle] = $row->bundle;
#  }
  return $allbundles;
}

/**
 * Fetch a list of the core Backdrop list of countries.
 * from location module
 *
 * @param bool $upper Default uppercase
 *
 * @return array The countries array
 */
function getlocations_get_countries_list($upper = TRUE, $only_continents = '', $only_countries = '') {

  if (module_exists('countries')) {
    $filter = array('enabled' => COUNTRIES_ENABLED);
    if ($only_countries) {
      $only_countries = backdrop_strtoupper($only_countries);
      $oc = explode(',', $only_countries);
      if (! empty($oc)) {
        $filter['countries'] = $oc;
      }
    }
    elseif (is_array($only_continents)) {
      $oc = array();
      foreach ($only_continents AS $v) {
        $oc[] = $v;
      }
      if (! empty($oc)) {
        $filter['continents'] = $oc;
      }
    }
    $countries = countries_get_countries('name', $filter);
  }
  else {
    include_once BACKDROP_ROOT . '/core/includes/locale.inc';
    // Statically cache a version of the core Backdrop list of countries
    $countries = &backdrop_static(__FUNCTION__);
    if (! isset($countries) || empty($countries)) {
      $countries = country_get_list();
    }
  }
  if (! $upper) {
    $countries = array_change_key_case($countries, CASE_LOWER);
  }
  return $countries;
}

/**
 * Get the full country name
 *
 * @param string $id The two letter iso code of a country
 *
 * @return string Full country name.
 *
 */
function getlocations_get_country_name($id) {
  $countries = getlocations_get_countries_list();
  $id = backdrop_strtoupper($id);
  $country = FALSE;
  if (isset($countries[$id])) {
    $country = $countries[$id];
  }
  return $country;
}

/**
 * Get the two letter code for a country
 *
 * @param string $country Full country name.
 *
 * @return string The two letter iso code of a country
 */
function getlocations_get_country_id($country) {
  $id = FALSE;
  $countries = getlocations_get_countries_list();
  foreach ($countries AS $k => $v) {
    if (backdrop_strtoupper($country) == backdrop_strtoupper($v)) {
      $id = backdrop_strtoupper($k);
      break;
    }
  }
  return $id;
}

/**
 * Convert decimal degrees to degrees,minutes,seconds.
 * from location module
 *
 * @param float Decimal degrees
 *
 * @return array degrees,minutes,seconds,sign
 */
function getlocations_dd_to_dms($coord) {
  $negative = ($coord < 0) ? TRUE : FALSE;
  $coord = abs($coord);
  $degrees = floor($coord);
  $coord -= $degrees;
  $coord *= 60;
  $minutes = floor($coord);
  $coord -= $minutes;
  $coord *= 60;
  $seconds = round($coord, 6);
  return array($degrees, $minutes, $seconds, $negative);
}

/**
 * Convert dms string to decimal degrees.
 * Should be reasonably tolerant of sloppy input
 *
 * @param string
 *
 * @return string
 */
function getlocations_dms_to_dd($dms) {
  // If it ends with a word starting with S or W, then it's a negative
  // case insensitive
  $direction = 1;
  preg_match("/\s(\w+)\b$/", $dms, $m);
  if (preg_match("/^s/i", $m[1]) || preg_match("/^w/i", $m[1]) ) {
    $direction = -1;
  }

  $dmsarr = explode(' ', $dms);
  $dmsarr2 = array();
  foreach ($dmsarr AS $v) {
    if ($v) {
      // strip out non-numbers found at the end of the string so we keep '.'
      $tmp = preg_replace("/\D+$/", '', $v);
      $tmp = trim($tmp);
      if ($tmp) {
        $dmsarr2[] = $tmp;
      }
    }
  }
  $dd = FALSE;
  if (count($dmsarr2) == 3) {
    list($degrees, $minutes, $seconds) = $dmsarr2;
    $dd = floatval($degrees + ((($minutes * 60) + ($seconds )) / 3600));
    if ($dd > 0) {
      $dd = $direction * $dd;
    }
  }
  return $dd;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_addressfield_convert($address) {
  $location = theme('getlocations_addressfield_convert', array('address' => $address));
  return $location;
}

/**
 * Make sure a string is a valid css dimension.
 */
/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_dim_check($string) {
  if (!is_string($string) || empty($string)) {
    return FALSE;
  }
  $s = backdrop_strtolower(trim($string));
  $matches = array();
  if (preg_match('/^([\d.]+)\s*(em|ex|px|in|cm|mm|pt|pc|%)$/', $s, $matches)) {
    return $matches[1] . $matches[2];
  }
  else {
    return FALSE;
  }
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_element_validate_dim($element, &$form_state) {

  $value = FALSE;
  if (isset($element['#value'])) {
    $value = $element['#value'];
  }
  elseif (isset($element['#default_value'])) {
    $value = $element['#default_value'];
  }
  $check = getlocations_dim_check($value);
  if (! $check) {
    form_error($element, t('%name must be valid css.', array('%name' => $element['#title'])));
  }
  else {
    $parents = $element['#parents'];
    // not a good solution
    $tot = count($parents);
    if ($tot == 3) {
      $form_state['values'][$parents[0]][$parents[1]][$parents[2]] = $check;
    }
    elseif ($tot == 5) {
      $form_state['values'][$parents[0]][$parents[1]][$parents[2]][$parents[3]][$parents[4]] = $check;
    }
  }
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_element_validate_latlon($element, &$form_state) {

  $value = FALSE;
  if (isset($element['#value'])) {
    $value = $element['#value'];
  }
  elseif (isset($element['#default_value'])) {
    $value = $element['#default_value'];
  }
  $check = getlocations_latlon_check($value);
  if (! $check) {
    form_error($element, t('%name must be expressed as a decimal latitude and longitude, separated by a comma.', array('%name' => $element['#title'])));
  }
  else {
    $parents = $element['#parents'];
    // not a good solution
    $tot = count($parents);
    if ($tot == 3) {
      $form_state['values'][$parents[0]][$parents[1]][$parents[2]] = $check;
    }
    elseif ($tot == 5) {
      $form_state['values'][$parents[0]][$parents[1]][$parents[2]][$parents[3]][$parents[4]] = $check;
    }
  }
}

/**
 * Calculations functions.
 * from location module
 */

/**
 * License clarification:
 *
 * On Feb 13, 2005, in message <Pine.LNX.4.58.0502131827510.5072@server1.LFW.org>,
 * the creator of these routines, Ka-Ping Yee, authorized these routines to be
 * distributed under the GPL.
 */

/**
 * @file
 * Trigonometry for calculating geographical distances.
 * All function arguments and return values measure distances in metres
 * and angles in degrees.  The ellipsoid model is from the WGS-84 datum.
 * Ka-Ping Yee, 2003-08-11
 */

// This library is an original implementation of UCB CS graduate student, Ka-Ping Yee (http://www.zesty.ca).

define('GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR', 6378137.0);
define('GETLOCATIONS_EARTH_FLATTENING', (1/298.257223563));
define('GETLOCATIONS_EARTH_RADIUS_SEMIMINOR', (6378137.0*(1-(1/298.257223563))));
define('GETLOCATIONS_EARTH_ECCENTRICITY_SQ', (2*(1/298.257223563)-pow((1/298.257223563), 2)));


// Default latitude halfway between north pole and equator
function getlocations_earth_radius($latitude=45) {
  // Estimate the Earth's radius at a given latitude.
  $lat = deg2rad($latitude);
  $x = (cos($lat) / GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR);
  $y = (sin($lat) / GETLOCATIONS_EARTH_RADIUS_SEMIMINOR);
  $return = (1 / (sqrt($x * $x + $y * $y)));
  return $return;
}

/**
 * Returns the SQL fragment needed to add a column called 'distance' to a query. For use in Views distance/proximity calculations
 *
 * @param $latitude    The measurement point
 * @param $longitude   The measurement point
 * @param $tbl_alias   If necessary, the alias name. Used by SQL to clearly identify a field.
 */
function getlocations_earth_distance_sql($latitude, $longitude, $tbl_alias = '') {
  // Make a SQL expression that estimates the distance to the given location.
  $radius = getlocations_earth_radius($latitude);

  // If the table alias is specified, add on the separator.
  $tbl_alias = (empty($tbl_alias) ? '' : $tbl_alias . '.');

  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS(COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * (COS(RADIANS($longitude)) * COS(RADIANS($lonfield)) + SIN(RADIANS($longitude)) * SIN(RADIANS($lonfield))) + SIN(RADIANS($latitude)) * SIN(RADIANS($latfield))), 0.00000) * $radius)";
  // some calcs predone in php
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $coslong = cos($long);
  $coslat = cos($lat);
  $sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS($coslat * COS(RADIANS($latfield)) * ($coslong*COS(RADIANS($lonfield)) + $sinlong * SIN(RADIANS($lonfield))) + $sinlat * SIN(RADIANS($latfield))), 0.00000) * $radius)";

  return $sql;
}

/**
 * @param float $longitude1
 *
 * @param float $latitude1
 *
 * @param float $longitude2
 *
 * @param float $latitude2
 *
 * @return
 *   Returns distance in meters
 *
 */
function getlocations_earth_distance($longitude1, $latitude1, $longitude2, $latitude2) {
  $longitude1 = floatval($longitude1);
  $latitude1 = floatval($latitude1);
  $longitude2 = floatval($longitude2);
  $latitude2 = floatval($latitude2);

  // Estimate the earth-surface distance between two locations.
  $long1 = deg2rad($longitude1);
  $lat1 = deg2rad($latitude1);
  $long2 = deg2rad($longitude2);
  $lat2 = deg2rad($latitude2);
  $radius = getlocations_earth_radius(($latitude1 + $latitude2) / 2);
  $cosangle = cos($lat1) * cos($lat2) * (cos($long1) * cos($long2) + sin($long1) * sin($long2)) + sin($lat1) * sin($lat2);
  return acos($cosangle) * $radius;
}

/**
 * This function uses earth_asin_safe so is not accurate for all possible
 *   parameter combinations. This means this function doesn't work properly
 *   for high distance values. This function needs to be re-written to work properly for
 *   larger distance values. See http://backdrop.org/node/821628
 *
 * http://backdrop.org/node/471040 provides a fix, this has been applied here.
 *
 */
function getlocations_earth_longitude_range($latitude, $longitude, $distance) {
  // Estimate the min and max longitudes within $distance of a given location.
  if (! $distance > 0) {
    $distance = 1;
  }
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $radius = getlocations_earth_radius($latitude) * cos($lat);

  if ($radius > 0) {
    $angle = abs($distance / $radius );
    $angle = min($angle, pi());
  }
  else {
    $angle = pi();
  }
  $minlong = $long - $angle;
  $maxlong = $long + $angle;
  if ($minlong < -pi()) {
    $minlong = $minlong + pi()*2;
  }
  if ($maxlong > pi()) {
    $maxlong = $maxlong - pi()*2;
  }
  return array(rad2deg($minlong), rad2deg($maxlong));
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_earth_latitude_range($latitude, $longitude, $distance) {
  // Estimate the min and max latitudes within $distance of a given location.
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $radius = getlocations_earth_radius($latitude);

  $angle = $distance / $radius;
  $minlat = $lat - $angle;
  $maxlat = $lat + $angle;
  $rightangle = pi()/2;
  if ($minlat < -$rightangle) { // wrapped around the south pole
    $overshoot = -$minlat - $rightangle;
    $minlat = -$rightangle + $overshoot;
    if ($minlat > $maxlat) {
      $maxlat = $minlat;
    }
    $minlat = -$rightangle;
  }
  if ($maxlat > $rightangle) { // wrapped around the north pole
    $overshoot = $maxlat - $rightangle;
    $maxlat = $rightangle - $overshoot;
    if ($maxlat < $minlat) {
      $minlat = $maxlat;
    }
    $maxlat = $rightangle;
  }
  return array(rad2deg($minlat), rad2deg($maxlat));
}

/**
 * This is a helper function to avoid errors when using the asin() PHP function.
 * asin is only real for values between -1 and 1.
 * If a value outside that range is given it returns NAN (not a number), which
 * we don't want to happen.
 * So this just rounds values outside this range to -1 or 1 first.
 *
 * This means that calculations done using this function with $x outside the range
 * will not be accurate.  The alternative though is getting NAN, which is an error
 * and won't give accurate results anyway.
 */
#function getlocations_earth_asin_safe($x) {
#  return asin(max(-1, min($x, 1)));
#}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_search_distance_sql($latitude, $longitude, $searchdistance, $tbl_alias = '') {
  $radius = getlocations_earth_radius($latitude);
  $tbl_alias = empty($tbl_alias) ? $tbl_alias : ($tbl_alias . '.');
  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS((SIN(RADIANS($latitude)) * SIN(RADIANS($latfield)) + (COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * COS(RADIANS($lonfield) - RADIANS($longitude))))), 0.00000) * $radius) BETWEEN 0 AND $searchdistance ";
  // some calcs predone in php
  $lat = deg2rad($latitude);
  $long = deg2rad($longitude);
  #$coslong = cos($long);
  $coslat = cos($lat);
  #$sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS(($sinlat * SIN(RADIANS($latfield)) + ($coslat * COS(RADIANS($latfield)) * COS(RADIANS($lonfield) - $long )))), 0.00000) * $radius)";
  if ($searchdistance > 0) {
    $sql .= " BETWEEN 0 AND $searchdistance";
  }

  return $sql;
}


/**
 * @param $distance
 *   A number in either kilometers, meters, miles, yards or nautical miles.
 *
 * @param $distance_unit
 *   String (optional). in either kilometers (km), meters (m), miles (mi), yards (yd) or nautical miles (nmi).
 *
 * @return
 *   A floating point number where the number in meters after the initially passed scalar has been round()'d
 */
function getlocations_convert_distance_to_meters($distance, $distance_unit = 'km') {
  if (!is_numeric($distance) || ! $distance > 0) {
    return NULL;
  }
  $units = array(
    'km'  => 1000.0,
    'm'   => 1.0,
    'mi'  => 1609.344,
    'yd'  => 0.9144,
    'nmi' => 1852.0
  );
  if (! in_array($distance_unit, array_keys($units))) {
    $distance_unit = 'km';
  }
  $conv = $units[$distance_unit];
  // Convert distance to meters
  $retval = round(floatval($distance) * $conv, 2);
  return $retval;
}

/**
 * @param $meters
 *   The distance in meters.
 *
 * @param $distance_unit
 *   String (optional). in either kilometers (km), meters (m), miles (mi), yards (yd) or nautical miles (nmi).
 *
 * @return
 *   A floating point number where the converted number has been round()'d
 */
function getlocations_convert_meters_to_distance($meters, $distance_unit = 'km') {
  if (!is_numeric($meters) || ! $meters > 0) {
    return NULL;
  }
  $units = array(
    'km'  => 0.001,
    'm'   => 1.0,
    'mi'  => 0.000621371,
    'yd'  => 1.093613298,
    'nmi' => 0.000539957
  );
  if (! in_array($distance_unit, array_keys($units))) {
    $distance_unit = 'km';
  }
  $conv = $units[$distance_unit];
  // Convert meters to display units. formatting in theme_getlocations_fields_distance();
  $retval = ($meters * $conv);
  return $retval;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_unit_names($unit = '', $type = 'plural') {
  $units_plural = array(
    'km'  => t('Kilometers'),
    'm'   => t('Meters'),
    'mi'  => t('Miles'),
    'yd'  => t('Yards'),
    'nmi' => t('Nautical miles'),
  );
  $units_plurals = array(
    'km'  => t('Kilometer(s)'),
    'm'   => t('Meter(s)'),
    'mi'  => t('Mile(s)'),
    'yd'  => t('Yard(s)'),
    'nmi' => t('Nautical mile(s)'),
  );
  $units = array(
    'km'  => t('Kilometer'),
    'm'   => t('Meter'),
    'mi'  => t('Mile'),
    'yd'  => t('Yard'),
    'nmi' => t('Nautical mile'),
  );
  // for dropdown
  $return = FALSE;
  if (empty($unit)) {
    if ($type == 'plural') {
      $return = $units_plural;
    }
    elseif ($type == 'plurals') {
      $return = $units_plurals;
    }
    else {
      $return = $units;
    }
  }
  else {
    // if $unit is supplied, return display name
    if (! in_array($unit, array_keys($units))) {
      $unit = 'km';
    }
    if ($type == 'plural') {
      $return = $units_plural[$unit];
    }
    elseif ($type == 'plurals') {
      $return = $units_plurals[$unit];
    }
    else {
      $return = $units[$unit];
    }
  }
  return $return;
}

// form elements
/**
 * @param string $default
 * @param string $title
 * @param string $description
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_distance_unit($default, $title = '', $description = '') {
  if (empty($title)) {
    $title = t('Units');
  }
  $units = getlocations_get_unit_names();
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#options' => $units,
    '#default_value' => $default,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;

}

/**
 * @param string $default
 * @param string $title
 * @param string $description
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_search_distance($default, $title = '', $description = '') {
  if (empty($title)) {
    $title = t('Distance');
  }
  $element = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default,
    '#size' => 10,
    '#required' => TRUE,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

/**
 * Normalizes a latitude to the [-90,90] range. Latitudes above 90 or
 * below -90 are capped, not wrapped.
 * @param {Number} lat The latitude to normalize, in degrees.
 * @type Number
 * @return Returns the latitude, fit within the [-90,90] range.
 */
function getlocations_normalizelat($lat) {
  return max(-90, min(90, $lat));
}

/**
 * Normalizes a longitude to the [-180,180] range. Longitudes above 180
 * or below -180 are wrapped.
 * @param {Number} lng The longitude to normalize, in degrees.
 * @type Number
 * @return Returns the longitude, fit within the [-180,180] range.
 */
function getlocations_normalizelng($lng) {
  if ($lng % 360 == 180) {
      return 180;
    }
    while ($lng > 180) {
      $lng -= 360;
    }
    while ($lng < -180) {
      $lng += 360;
    }
    return $lng;
}

/**
 * Function
 *
 * @param bool $override
 *
 * @return
 *   Returns TRUE if user agent says its a mobile device
 *
 */
function getlocations_is_mobile($override = FALSE) {
  if ($override) {
    return TRUE;
  }
  $ua_string = getlocations_ua_get();
  $str = "/" . $ua_string . "/i";
  $is_mobile = FALSE;
  $ua = (isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : "");
  if ($ua && preg_match($str, $ua)) {
    $is_mobile = TRUE;
  }
  return $is_mobile;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns a pipe delimited list of User-Agent strings
 *
 */
function getlocations_ua_get() {
  $getlocations_defaults = getlocations_defaults();
  $ua = $getlocations_defaults['ua_string'];
  return $ua;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_aggr_get() {
  $getlocations_defaults = getlocations_defaults();
  $aggr = $getlocations_defaults['aggr'];
  return $aggr;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_term_marker($nid, $marker) {
  #$getlocations_defaults = getlocations_defaults();
  // term markers
  #$getlocations_term_marker = config_get('getlocations_term_marker', array('enable' => 0, 'vids' => 0, 'max_depth' => ''));
  #if ($getlocations_term_marker['enable'] && $getlocations_term_marker['vids']) {
  #  $vids = $getlocations_term_marker['vids'];
  #  foreach ($vids AS $vid) {
  #    $results = db_query('SELECT i.tid FROM {taxonomy_index} i JOIN {taxonomy_term_data} d ON i.tid=d.tid WHERE i.nid = :nid AND d.vid =:vid', array(':nid' => $nid, ':vid' => $vid));
  #    $record = $results->fetchObject();
  #    if ($record) {
  #      $marker = (isset($getlocations_term_marker['vid'][$vid]['term'][$record->tid]['map_marker']) ? $getlocations_term_marker['vid'][$vid]['term'][$record->tid]['map_marker'] : $getlocations_defaults['term_map_marker']);
  #    }
  #  }
  #}
  return $marker;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_supported_modules() {
  return array(
    'getlocations_fields',
  );
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_get_current_supported_module() {
  $modules = getlocations_supported_modules();
  foreach ($modules AS $module) {
    if (module_exists($module)) {
      return $module;
    }
  }
  return FALSE;
}

/**
 * Function
 *
 * @param
 *
 * @return
 *   Returns
 *
 */
function getlocations_controlpositions($dd = TRUE) {
    if ($dd) {
      $controlpositions = array(
        ''   => t('Default'),
        'tl' => t('Top Left'),
        'tc' => t('Top Center'),
        'tr' => t('Top Right'),
        'rt' => t('Right Top'),
        'rc' => t('Right Center'),
        'rb' => t('Right Bottom'),
        'br' => t('Bottom Right'),
        'bc' => t('Bottom Center'),
        'bl' => t('Bottom Left'),
        'lb' => t('Left Bottom'),
        'lc' => t('Left Center'),
        'lt' => t('Left Top'),
      );
    }
    else {
      $controlpositions = array('tl', 'tc', 'tr', 'rt', 'rc', 'rb', 'br', 'bc', 'bl', 'lb', 'lc', 'lt');
    }
    return $controlpositions;
}

/**
 * Allows for aliases in entity types
 *
 */
function getlocations_get_entity_type_from_path($path) {
  $entity_type = $path;
  // getlocations path => entity_type
  $aliases = array(
    'term' => 'taxonomy_term',
  );
  if (isset($aliases[$path])) {
    $entity_type = $aliases[$path];
  }

  return $entity_type;
}

/**
 * Given two points in lat/lon form, returns the distance between them.
 * @param $latlon_a
 *   An associative array where
 *      'lon' => is a floating point of the longitude coordinate for the point given by latlonA
 *      'lat' => is a floating point of the latitude coordinate for the point given by latlonB
 * @param $latlon_b
 *      Another point formatted like $latlon_b
 * @param $distance_unit
 *      A string that is one of 'km', 'm', 'mi', 'yd', 'nmi'.
 *      Defaults to 'km'
 * @return
 *    NULL if sense can't be made of the parameters.
 *    An associative array where
 *      'scalar' => Is the distance between the two lat/lon parameter points
 *      'distance_unit' => Is the unit of distance being represented by 'scalar'.
 *
 */
function getlocations_distance_between($latlon_a = array(), $latlon_b = array(), $distance_unit = 'km') {
  if (!isset($latlon_a['lon']) || !isset($latlon_a['lat']) || !isset($latlon_b['lon']) || !isset($latlon_b['lat'])) {
    return NULL;
  }

  $meters = getlocations_earth_distance($latlon_a['lon'], $latlon_a['lat'], $latlon_b['lon'], $latlon_b['lat']);
  $distance = getlocations_convert_meters_to_distance($meters, $distance_unit);
  return array('scalar' => $distance, 'distance_unit' => $distance_unit);
}


/***********************************************************/
// these functions currently not in use
function getlocations_earth_xyz($longitude, $latitude, $height = 0) {
  // Convert longitude and latitude to earth-centered earth-fixed coordinates.
  // X axis is 0 long, 0 lat; Y axis is 90 deg E; Z axis is north pole.

  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);

  $coslong = cos($long);
  $coslat = cos($lat);
  $sinlong = sin($long);
  $sinlat = sin($lat);
  $radius = (GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR / sqrt(1 - GETLOCATIONS_EARTH_ECCENTRICITY_SQ * $sinlat * $sinlat));
  $x = ($radius + $height) * $coslat * $coslong;
  $y = ($radius + $height) * $coslat * $sinlong;
  $z = (($radius * (1 - GETLOCATIONS_EARTH_ECCENTRICITY_SQ ) + $height) * $sinlat);
  return array($x, $y, $z);
}

function getlocations_earth_arclength($angle, $latitude=37.9) {
  // Convert a given angle to earth-surface distance.
  return deg2rad($angle) * getlocations_earth_radius($latitude);
}

function getlocations_get_exact_distance_sql($latitude, $longitude, $tbl_alias = '') {
  $radius = getlocations_earth_radius($latitude);
  $tbl_alias = empty($tbl_alias) ? $tbl_alias : ($tbl_alias . '.');
  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS((SIN(RADIANS($latitude)) * SIN(RADIANS($latfield))) + (COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * COS(RADIANS($longitude - $lonfield)))), 0.00000) * $radius)";
  // some calcs predone in php
  $lat = deg2rad($latitude);
  $long = deg2rad($longitude);
  #$coslong = cos($long);
  $coslat = cos($lat);
  #$sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS(($sinlat * SIN(RADIANS($latfield))) + ($coslat * COS(RADIANS($latfield)) * COS(RADIANS($longitude - $lonfield)))), 0.00000) * $radius)";
  return $sql;
}

function getlocations_check_jquery_version($admin=TRUE) {
  $version = '1.4.4';
  $v = FALSE;
  if (module_exists('jquery_update')) {
    if ($admin) {
      $version = config_get('jquery_update_jquery_admin_version', FALSE);
      if ($version == 0) {
        $version = config_get('jquery_update_jquery_version', FALSE);
      }
    }
    else {
      $version = config_get('jquery_update_jquery_version', FALSE);
    }
  }
  if ($version) {
    $a = explode(".", $version);
    if ($a[0] > 1) {
      $v = TRUE;
    }
    elseif ($a[1] > 5) {
      $v = TRUE;
    }
  }
  return $v;
}

// Theming functions

/**
 * Implements hook_theme().
 *
 * This lets us tell Backdrop about our theme functions and their arguments.
 */
function getlocations_theme() {

  $file = array(
    'file' => 'getlocations.theme.inc',
  );

  return array(
    'getlocations_show' => array(
      'variables' => array(
        'width' => '',
        'height' => '',
        'defaults' => '',
        'mapid' => '',
        'latlons' => '',
        'minmaxes' => '',
        'type' => '',
        'node' => '',
      ),
    ) + $file,
    'getlocations_adinfo' => array(
      'variables' => array(
        'location' => NULL,
      ),
    ) + $file,
    'getlocations_box' => array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'templates/getlocations_box',
    ) + $file,
    'getlocations_marker_box' => array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'templates/getlocations_marker_box',
    ) + $file,
    'getlocations_plugin_style_map_options_form' => array(
      'render element' => 'form',
    ) + $file,
    'getlocations_plugin_style_streetview_options_form' => array(
      'render element' => 'form',
    ) + $file,
    'getlocations_latitude_dms' => array(
      'variables' => array(
        'latitude' => '',
      ),
    ) + $file,
    'getlocations_longitude_dms' => array(
      'variables' => array(
        'longitude' => '',
      ),
    ) + $file,
    'getlocations_addressfield_convert' => array(
      'variables' => array(
        'address' => array(),
      ),
    ) + $file,
    'getlocations_lidinfo' => array(
      'variables' => array(
        'lid' => '',
        'lidkey' => '',
      ),
    ) + $file,
    'getlocations_settings_form' => array(
      'render element' => 'form',
    ) + $file,
  );
}
