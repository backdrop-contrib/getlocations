<?php

/**
 * @file
 * getlocations_search.module
 * @author Bob Hutchinson https://backdropcms.org/account/hutch
 * @copyright GNU GPL
 *
 * Provides a search page.
 * for Drupal 7
 */

define('GETLOCATIONS_SEARCH_PATH', backdrop_get_path('module', 'getlocations_search'));

/**
 * Implements hook_help().
 */
function getlocations_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations_search':
      $output = '<p>' . t('Provide a search faciliy for locations on a map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function getlocations_search_permission() {
  $perms = array();
  $perms['access getlocations search'] = array(
    'title' => t('Access Getlocations Search'),
    'description' => t('View and use the Getlocations_search module.')
  );
  return $perms;
}

/**
 * Implements hook_config_info().
 */
function getlocations_search_config_info() {
  $info['getlocations_search.settings'] = array(
    'label' => t('Getlocations search settings'),
    'group' => t('Configuration'),
  );
  $info['getlocations_search_block.settings'] = array(
    'label' => t('Getlocations search block settings'),
    'group' => t('Configuration'),
  );
  $info['getlocations_search.paths'] = array(
    'label' => t('Getlocations search paths'),
    'group' => t('Configuration'),
  );
  return $info;
}


/**
 * Implements hook_menu().
 */
function getlocations_search_menu() {
  $items = array();

  $items[GETLOCATIONS_ADMIN_PATH . '/search'] = array(
    'title' => 'Search',
    'description' => 'Configure Getlocations search',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('getlocations_search_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'getlocations_search.admin.inc',
    'weight' => 4,
  );

  $items['getlocations_search'] = array(
    'title' => 'Getlocations search',
    'description' => 'Search for places on a map',
    'access arguments' => array('access getlocations search'),
    'page callback' => 'getlocations_search',
    'type' => MENU_SUGGESTED_ITEM,
    'menu_name' => 'main-menu',
  );

  // getlocations_search/info     # ajax callback to fetch all location info
  $items['getlocations_search/info'] = array(
    'page callback' => 'getlocations_search_allinfo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  if (module_exists('taxonomy')) {
    $items['getlocations_search/term_autocomplete'] = array(
      'page callback' => 'getlocations_search_term_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  // colorbox
  $items['getlocations_search_box'] = array(
    'title' => 'Getlocations search',
    'access arguments' => array('access getlocations search'),
    'page callback' => 'getlocations_search_box',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu item
 */
function getlocations_search($which = 'page') {
  $contents = '';
  $contents .= theme('getlocations_search', array('which' => $which));
  return $contents;
}

/**
 * The search form
 *
 */
function getlocations_search_form($form, &$form_state, $which, $mapid) {
  $mapid2 = preg_replace("/_/", "-", $mapid);
  $getlocations_search_defaults = getlocations_search_defaults();

  if ($which == 'block') {
    $getlocations_search_defaults = getlocations_search_block_get_var();
  }

  $form['#attached']['css'] = array(GETLOCATIONS_SEARCH_PATH . '/getlocations_search.css');

  // pass this on to the theme
  $form['which'] = array('#type' => 'value', '#value' => $which);
  $form['mapid'] = array('#type' => 'value', '#value' => $mapid);
  $form['display_latlon'] = array('#type' => 'value', '#value' => $getlocations_search_defaults['display_latlon']);
  $form['display_geo_microformat'] = array('#type' => 'value', '#value' => $getlocations_search_defaults['display_geo_microformat']);
  $form['display_accuracy'] = array('#type' => 'value', '#value' => $getlocations_search_defaults['display_accuracy']);

  if ($getlocations_search_defaults['method'] == 'vocab' && $getlocations_search_defaults['vocab_element'] == 'dropdown') {
    //
    $form['getlocations_search_' . $mapid] = array(
      '#type' => 'select',
      '#title' => t('Search'),
      '#options' => getlocations_search_term_get(),
    );
  }
  else {
    $form['getlocations_search_' . $mapid] = array(
      '#type' => 'textfield',
      '#title' => t('Search'),
      '#maxlength' => 255,
      '#size' => $getlocations_search_defaults['searchbox_size'],
    );
    if ($getlocations_search_defaults['method'] == 'vocab' && $getlocations_search_defaults['vocab_element'] == 'autocomplete') {
      $form['getlocations_search_' . $mapid]['#autocomplete_path'] = 'getlocations_search/term_autocomplete';
    }
  }

  if ($getlocations_search_defaults['use_geolocation_button']) {
    $form['getlocations_search_geolocation_button_' . $mapid] = array('#markup' => '');
  }

  if ($getlocations_search_defaults['display_search_distance']) {
    $form['getlocations_search_distance_' . $mapid] = getlocations_element_search_distance($getlocations_search_defaults['search_distance'], t('Search distance'), t('The distance away from the center to search for locations.'));
  }
  else {
    $form['getlocations_search_distance_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_distance'],
      '#attributes' => array('id' => 'edit-getlocations-search-distance-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['display_search_units']) {
    $form['getlocations_search_units_' . $mapid] = getlocations_element_distance_unit($getlocations_search_defaults['search_units'], t('Distance units'));
  }
  else {
    $form['getlocations_search_units_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_units'],
      '#attributes' => array('id' => 'edit-getlocations-search-units-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['display_search_limits']) {
    $form['getlocations_search_limits_' . $mapid] = getlocations_element_map_limits($getlocations_search_defaults['search_limits']);
  }
  else {
    $form['getlocations_search_limits_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_limits'],
      '#attributes' => array('id' => 'edit-getlocations-search-limits-' . $mapid2)
    );
  }

  $opts = getlocations_search_type_options();
  if ($getlocations_search_defaults['display_search_type'] && count($opts)) {
    $form['getlocations_search_type_' . $mapid] = array(
      '#type' => 'select',
      '#title' => t('Restrict the search'),
      '#options' => $opts,
      '#default_value' => $getlocations_search_defaults['search_type'],
      '#description' => t('Restrict the search to a content type'),
    );
  }
  else {
    $form['getlocations_search_type_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_type'],
      '#attributes' => array('id' => 'edit-getlocations-search-type-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['restrict_by_country'] && $getlocations_search_defaults['country']) {
    $form['getlocations_search_country_' . $mapid] = array(
      '#markup' => $getlocations_search_defaults['country'],
    );
  }

  if ($getlocations_search_defaults['method'] != 'google_ac') {
    $form['getlocations_search_submit_' . $mapid] = array(
      '#type' => 'submit',
      '#value' => t('Go')
    );
  }
  else {
    if ($getlocations_search_defaults['geocode_button_enable']) {
      // geocode button
      $form['getlocations_search_geocode_button_' . $mapid] = array('#markup' => '');
    }
  }
  if ($getlocations_search_defaults['reset_button_enable']) {
    // Reset button
    $form['getlocations_search_reset_button_' . $mapid] = array('#markup' => '');
  }

  return $form;
}

/**
 * colorbox
 *
 */
function getlocations_search_box() {
  $content = getlocations_search();
  $output = theme('getlocations_search_box', array('content' => $content));
  print $output;
  exit;
}

/**
 * Set up the map and use getlocations to spit it out
 *
 */
function getlocations_search_getmap($which = 'page') {
  $getlocations_defaults = getlocations_defaults();
  $getlocations_defaults['places'] = 1;
  $getlocations_defaults['preload_data'] = 0;


  if ($which == 'block') {
    $getlocations_search_defaults = getlocations_search_block_get_var();
  }
  else {
    $getlocations_search_defaults = getlocations_search_defaults();
  }


  // we need a markermanager enabled
  if ($getlocations_defaults['markermanagertype'] < 1) {
    $getlocations_search_defaults['markermanagertype'] = 1;
  }
  $getlocations_search_defaults['pansetting'] = $getlocations_defaults['pansetting'];

  // w3w
  $w3w = getlocations_search_w3w_settings();
  #$shapes = getlocations_search_shapes_settings();
  $getlocations_search_defaults += $w3w;
  #$getlocations_search_defaults += $shapes;

  // we need to update $getlocations_defaults with data from $getlocations_search_defaults
  $keys = array_keys($getlocations_search_defaults);

  foreach ($keys AS $key) {
    $getlocations_defaults[$key] = $getlocations_search_defaults[$key];
  }
  // tell getlocations.js that this map is externally controlled
  // switch it off for showall so that markers can be generated
  if (! $getlocations_search_defaults['showall']) {
    $getlocations_defaults['extcontrol'] = 'getlocations_search';
  }
  $mapid = getlocations_setup_map($getlocations_defaults);

  $aggr = (getlocations_aggr_get() ? TRUE : FALSE);

  getlocations_search_js_settings_do($getlocations_search_defaults, $mapid);
  $getlocations_search_paths = getlocations_search_paths_get();
  $jsfile = $getlocations_search_paths['getlocations_search_path'];
  $js_opts = array();
  $js_opts['weight'] = $getlocations_defaults['getlocations_js_weight'] + 30;
  $js_opts['type'] = 'file';
  $js_opts['preprocess'] = $aggr;
  backdrop_add_js($jsfile, $js_opts);

  $minmaxes = '';
  $latlons = array();

  if ($getlocations_search_defaults['showall']) {
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
    $locations = getlocations_search_load_all_locations($getlocations_search_defaults['search_type']);
    $ct = 0;
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if ($latlon = getlocations_latlon_check($location['latitude'] . ',' . $location['longitude'])) {
          $ll = explode(',', $latlon);
          $location['latitude'] = $ll[0];
          $location['longitude'] = $ll[1];
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);

          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          if (isset($location['lid']) && $location['lid']) {
            $id = $location['lid'];
          }
          elseif (isset($location['nid']) && $location['nid']) {
            $id = $location['nid'];
            $location['key'] = 'nid';
          }
          elseif (isset($location['uid']) && $location['uid']) {
            $id = $location['uid'];
            $location['key'] = 'uid';
          }
          elseif (isset($location['tid']) && $location['tid']) {
            $id = $location['tid'];
            $location['key'] = 'tid';
          }
          elseif (isset($location['cid']) && $location['cid']) {
            $id = $location['cid'];
            $location['key'] = 'cid';
          }
          $name = htmlspecialchars_decode(isset($location['name']) ? strip_tags($location['name']) : strip_tags($location['title']), ENT_QUOTES);
          $latlons[] = array($location['latitude'], $location['longitude'], $id, $name, $location['marker'] , $location['key'], '', '');
          $ct++;
        }
      }
    }

    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }
  }

  getlocations_js_settings_do($getlocations_defaults, $latlons, $minmaxes, $mapid, FALSE, $getlocations_defaults['extcontrol']);

  $map = theme('getlocations_show', array('width' => $getlocations_defaults['width'] , 'height' => $getlocations_defaults['height'] , 'defaults' => $getlocations_defaults, 'mapid' => $mapid, 'latlons' => $latlons, 'minmaxes' => $minmaxes, 'type' => '', 'node' => ''));
  return array('map' => $map, 'mapid' => $mapid);
}

/**
 * @param array $defaults
 *  Settings
 *
 * @param string $mapid
 *  Unique map identifier used in javascript to allow multiple maps
 *
 */
function getlocations_search_js_settings_do($defaults, $mapid) {

  $do_lookup = getlocations_search_do_types();
  $settings = array(
    $mapid => array(
      'method'                         => $defaults['method'],
      'maxzoom'                        => $defaults['maxzoom'],
      'do_lookup'                      => ($do_lookup ? 1 : 0),
      'autocomplete_bias'              => $defaults['autocomplete_bias'],
      'restrict_by_country'            => $defaults['restrict_by_country'],
      'country'                        => $defaults['country'],
      'show_distance'                  => $defaults['show_distance'],
      'search_marker'                  => $defaults['search_marker'],
      'do_search_marker'               => $defaults['do_search_marker'],
      'search_marker_toggle'           => $defaults['search_marker_toggle'],
      'search_marker_toggle_active'    => $defaults['search_marker_toggle_active'],
      'search_info_path'               => url("getlocations_search/info"),
      'search_radshape_enable'         => $defaults['search_radshape_enable'],
      'search_radshape_strokecolor'    => $defaults['search_radshape_strokecolor'],
      'search_radshape_strokeopacity'  => $defaults['search_radshape_strokeopacity'],
      'search_radshape_strokeweight'   => $defaults['search_radshape_strokeweight'],
      'search_radshape_fillcolor'      => $defaults['search_radshape_fillcolor'],
      'search_radshape_fillopacity'    => $defaults['search_radshape_fillopacity'],
      'search_radshape_toggle'         => $defaults['search_radshape_toggle'],
      'search_radshape_toggle_active'  => $defaults['search_radshape_toggle_active'],
      'search_distance_type'           => $defaults['search_distance_type'],
      'zoom_on_single_use'             => $defaults['zoom_on_single_use'],
      'display_accuracy'               => $defaults['display_accuracy'],
      'showall'                        => $defaults['showall'],
      'display_geo_microformat'        => $defaults['display_geo_microformat'],
    ),
  );

  backdrop_add_js(array('getlocations_search' => $settings), 'setting');
}

/**
 * Collect information about which entity_types have fields for supported module
 * and return an array suitable for a dropdown
 *
 * @return Array
 *
 */
function getlocations_search_type_options() {
  $module = getlocations_get_current_supported_module();
  if (! $module) {
    return array();
  }

  if ($module = 'getlocations_fields' && module_exists('getlocations_fields')) {
    $query = db_select('getlocations_fields_entities', 'e');
    $query->fields('e', array('nid','uid','tid','cid'));
    $rows = $query->execute();
    $opts = array();
    foreach ($rows AS $row) {
      $entity_type = '';
      if ( $row->nid > 0 ) {
        $entity_type = 'node';
      }
      elseif ( $row->uid > 0 ) {
        $entity_type = 'user';
      }
      elseif ( $row->tid > 0 ) {
        $entity_type = 'taxonomy_term';
      }
      elseif ( $row->cid > 0 ) {
        $entity_type = 'comment';
      }
      if ($entity_type) {
        $found = FALSE;
        if ($entity_type == 'user' && getlocations_access_user_location()) {
          $found = TRUE;
        }
        elseif ($entity_type == 'comment' && user_access('access comments') ) {
          $found = TRUE;
        }
        elseif (getlocations_access_location()) {
          $found = TRUE;
        }
        if ($found) {
          $entity_get_info = entity_get_info($entity_type);
          $label = (isset($entity_get_info['plural label']) ? $entity_get_info['plural label'] : $entity_get_info['label'] );
          $opts[$entity_type] = $label;
        }
      }
    }
    if (count($opts) > 1) {
      $opts = array('all' => t('Show All')) + $opts;
      return $opts;
    }
  }

  return array();
}

function getlocations_search_load_all_locations($search_type = 'all') {

  if (! user_access('access getlocations')) {
    return;
  }

  $getlocations_defaults = getlocations_defaults();

  $permitted_entity_types = array();
  if (user_access('access content') && user_access('access getlocations') && ($search_type == 'all' || $search_type == 'node')) {
    $permitted_entity_types[] = 'node';
  }
  if (getlocations_access_user_location() && ($search_type == 'all' || $search_type == 'user')) {
    $permitted_entity_types[] = 'user';
  }
  if (user_access('access getlocations') && ($search_type == 'all' || $search_type == 'term')) {
    $permitted_entity_types[] = 'term';
  }
  if (user_access('access comments') && user_access('access getlocations') && ($search_type == 'all' || $search_type == 'comment')) {
    $permitted_entity_types[] = 'comment';
  }

  $locations = array();
  $module = getlocations_get_current_supported_module();
  if ($module == 'getlocations_fields') {
    // we want all the glids
    $query = db_select('getlocations_fields', 'f');
    $query->fields('f', array('glid'));
    $rows = $query->execute();
    $glids = array();
    foreach ($rows AS $row) {
      $glids[$row->glid] = $row->glid;
    }
    $ct = 0;
    foreach ($glids AS $glid) {
      $locations[$ct] = getlocations_load_location($glid);
      $ct++;
    }

  }

  if ($module == 'getlocations_fields' && ! empty($locations)) {
    foreach ($locations AS $ct => $val) {
      if ($locations[$ct]['type'] == 'node') {
        $n = node_load($locations[$ct]['nid']);
        $locations[$ct]['title'] = htmlspecialchars_decode(($locations[$ct]['name'] ? strip_tags($locations[$ct]['name']) : strip_tags($n->title)), ENT_QUOTES);
        // sanity check
        if ($n->status == 0 || ! in_array('node', $permitted_entity_types)) {
          unset($locations[$ct]);
        }
      }
      elseif ($locations[$ct]['type'] == 'user') {
        $u = user_load($locations[$ct]['uid']);
        $locations[$ct]['title'] = htmlspecialchars_decode(($locations[$ct]['name'] ? strip_tags($locations[$ct]['name']) : strip_tags($u->name)), ENT_QUOTES);
        // sanity check
        if ($u->status == 0 || ! in_array('user', $permitted_entity_types)) {
          unset($locations[$ct]);
        }
      }
      elseif ($locations[$ct]['type'] == 'term') {
        // sanity check
        if (! in_array('term', $permitted_entity_types)) {
          unset($locations[$ct]);
        }
      }
      elseif ($locations[$ct]['type'] == 'comment') {
        $c = comment_load($locations[$ct]['cid']);
        $locations[$ct]['title'] = htmlspecialchars_decode(($locations[$ct]['name'] ? strip_tags($locations[$ct]['name']) : strip_tags($c->subject)), ENT_QUOTES);
        // sanity check
        if ($c->status == 0 || ! in_array('comment', $permitted_entity_types)) {
          unset($locations[$ct]);
        }
      }
    }
  }

  return $locations;
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function getlocations_search_theme() {

  $file = array(
    'file' => 'getlocations_search.theme.inc',
  );

  return array(
    'getlocations_search' => array(
      'variables' => array(
        'which' => NULL,
      ),
    )+$file,
    'getlocations_search_form' => array(
      'render element' => 'form',
    )+$file,
    'getlocations_search_settings_form' => array(
      'render element' => 'form',
    )+$file,
    'getlocations_search_block_settings_form' => array(
      'render element' => 'form',
    )+$file,
    'getlocations_search_box' => array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'templates/getlocations_search_box',
    )+$file,
  );
}

function getlocations_search_get_keys() {
  $settings = getlocations_search_defaults();
  $keys = array_keys($settings);
  return $keys;
}

/**
 * Set up default settings.
 *
 * @return array $newdefaults
 *
 */
function getlocations_search_defaults() {
  $defaults = config_get('getlocations_search.settings', 'settings');
  $saved = $defaults['saved'];
  // if this has never been saved use getlocations_defaults settings
  if (! $saved) {
    $getlocations_defaults = getlocations_defaults();
    $keys = array_keys($defaults);
    foreach ($keys AS $key) {
      if (isset($getlocations_defaults[$key])) {
        $defaults[$key] = $getlocations_defaults[$key];
      }
    }
  }
  return $defaults;
}

/**
 * @return array $options
 *   Returns list of vocabularies suitable for a dropdown
 */
function getlocations_search_get_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        $options[$vid] = $vocabulary->name;
      }
      return $options;
    }
  }
  return FALSE;
}

/**
 * autocomplete for taxonomy terms
 *
 * @param string $string
 *
 * @return
 *   Returns term names
 *
 */
function getlocations_search_term_autocomplete($string) {
  $matches = array();

  // Taxonomy which holds locative info
  $getlocations_search_defaults = getlocations_search_defaults();
  $vid = FALSE;
  if (is_numeric($getlocations_search_defaults['vocab']) && $getlocations_search_defaults['vocab'] > 0) {
    $vid = $getlocations_search_defaults['vocab'];
  }

  if ($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('name'))
      ->where("LOWER(name) LIKE LOWER(:st)", array(':st' => $string . '%'))
      ->condition('t.vid', $vid, '=')
      ->range(0, 15);
    $result = $query->execute();
    foreach ($result AS $row) {
      $matches[$row->name] = check_plain($row->name);
    }
  }
  backdrop_json_output($matches);
}

/**
 * @return array $matches
 *   Returns a list of terms of a given vocabulary, suitable for a dropdown
 */
function getlocations_search_term_get() {
  $matches = array();

  // Taxonomy which holds locative info
  $getlocations_search_defaults = getlocations_search_defaults();
  $vid = FALSE;
  if (is_numeric($getlocations_search_defaults['vocab']) && $getlocations_search_defaults['vocab'] > 0) {
    $vid = $getlocations_search_defaults['vocab'];
  }

  if ($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('name'))
      ->condition('t.vid', $vid, '=');
    $result = $query->execute();
    foreach ($result AS $row) {
      $matches[$row->name] = getlocations_apoclean($row->name);
    }
  }
  ksort($matches);
  return $matches;
}

function getlocations_search_paths_get() {
  $paths = config_get('getlocations_search.paths', 'paths');
  return $paths;
}

/**
 * @return json format $output
 *   Returns search result to getlocations_search.js
 *
 */
function getlocations_search_allinfo() {
  $lat = $_GET['lat'];
  $lon = $_GET['lon'];
  $getlocations_search_defaults = getlocations_search_defaults();
  $distance = $getlocations_search_defaults['search_distance'];
  if (isset($_GET['distance']) && is_numeric($_GET['distance'])) {
    $distance = $_GET['distance'];
    // sanity check
    if (! $distance > 0) {
      $distance = $getlocations_search_defaults['search_distance'];
    }
  }
  $units = $getlocations_search_defaults['search_units'];
  if (isset($_GET['units'])) {
    $units = $_GET['units'];
    // sanity check
    $unitsarr = array('km', 'm', 'mi', 'yd', 'nmi');
    if (! in_array($units, $unitsarr)) {
      $units = $getlocations_search_defaults['search_units'];
    }
  }
  $type = $getlocations_search_defaults['search_type'];
  if (isset($_GET['type'])) {
    $type = $_GET['type'];
    // sanity check
    $typarr = array('all', 'node', 'user', 'term', 'taxonomy_term', 'comment');
    if (! in_array($type, $typarr)) {
      $type = $getlocations_search_defaults['search_type'];
    }
  }

  $dosort = FALSE;
  if (isset($_GET['limits']) && is_numeric($_GET['limits'])) {
    $limits = $_GET['limits'];
    // sanity check
    if ($limits < 0) {
      $limits = 0;
    }
    if ($limits > 0) {
      $dosort = TRUE;
    }
  }

  // sanity check
  if ($latlon = getlocations_latlon_check($lat . ',' . $lon)) {
    $ll = explode(',', $latlon);
    $lat = $ll[0];
    $lon = $ll[1];
    $output = getlocations_search_info_sql($lat, $lon, $distance, $units, $type, $dosort, $limits);
    backdrop_json_output($output);
  }
}

// $type can be node, user, comment, term. anything else is all
function getlocations_search_info_sql($lat, $lon, $distance, $units, $type, $dosort, $limits) {

  $getlocations_defaults = getlocations_defaults();
  $getlocations_search_defaults = getlocations_search_defaults();
  $dms = ( ($getlocations_search_defaults['display_dms'] || $getlocations_search_defaults['display_geo_microformat']) ? TRUE : FALSE);

  $distance_meters = getlocations_convert_distance_to_meters($distance, $units);
  $latrange = getlocations_earth_latitude_range($lat, $lon, $distance_meters);
  $lonrange = getlocations_earth_longitude_range($lat, $lon, $distance_meters);

  $locations = array();

  if (module_exists('getlocations_fields')) {
    if ($lonrange[0] > $lonrange[1]) {
      $where = "g.latitude > :minlat AND g.latitude < :maxlat AND ((g.longitude < 180 AND g.longitude > :minlon) OR (g.longitude < :maxlon AND g.longitude > -180))";
    }
    else {
      $where = "g.latitude > :minlat AND g.latitude < :maxlat AND g.longitude > :minlon AND g.longitude < :maxlon";
    }
    $sqlarr = array(':minlat' => $latrange[0], ':maxlat' => $latrange[1], ':minlon' => $lonrange[0], ':maxlon' => $lonrange[1]);

    if ($getlocations_search_defaults['search_distance_type'] == 'dist') {
      $where .= " AND " . getlocations_earth_distance_sql($lat, $lon, 'g') . ' < :distance';
      $sqlarr += array(':distance' => $distance_meters);
    }

    $fields = array();
    $fields[] = 'g.glid';
    $fields[] = 'g.name';
    $fields[] = 'g.latitude';
    $fields[] = 'g.longitude';
    $fields[] = 'g.marker';
    if (getlocations_fields_column_check('data')) {
      $fields[] = 'g.data';
    }
    $fields[] = 'f.nid';
    $fields[] = 'f.uid';
    $fields[] = 'f.tid';
    $fields[] = 'f.cid';

    $sqlsnip1 = "";
    $sqlsnip2 = "";
    $marker = '';
    if ($type == 'node' && user_access('access content') && user_access('access getlocations')) {
      $fields[] = 'n.title AS title';
      $fields[] = 'n.nid';
      $sqlsnip1 = "LEFT JOIN {node} n ON f.vid = n.vid ";
      $sqlsnip2 = "AND n.nid > 0 AND n.status = 1 ";
      $marker = $getlocations_defaults['node_map_marker'];
    }
    elseif ($type == 'user' && getlocations_access_user_location()) {
      $fields[] = 'u.name AS title';
      $fields[] = 'u.uid';
      $sqlsnip1 = "LEFT JOIN {users} u ON f.uid = u.uid ";
      $sqlsnip2 = "AND u.uid > 0 AND u.status = 1 ";
      $marker = $getlocations_defaults['user_map_marker'];
    }
    elseif (($type == 'term' || $type == 'taxonomy_term') && user_access('access getlocations')) {
      $fields[] = 't.name AS title';
      $fields[] = 't.tid';
      $sqlsnip1 = "LEFT JOIN {taxonomy_term_data} t ON f.tid = t.tid ";
      $sqlsnip2 = "AND t.tid > 0 ";
      $marker = $getlocations_defaults['vocabulary_map_marker'];
    }
    elseif ($type == 'comment' && user_access('access comments') && user_access('access getlocations')) {
      $fields[] = 'c.subject AS title';
      $fields[] = 'c.cid';
      $sqlsnip1 = "LEFT JOIN {comment} c ON f.cid = c.cid ";
      $sqlsnip2 = "AND c.cid > 0 AND c.status = 1 ";
      $marker = $getlocations_defaults['comment_map_marker'];
    }
    elseif ($type == 'all') {
      $sqlsnip2arr = array();
      if (user_access('access content') && user_access('access getlocations')) {
        $sqlsnip2arr[] = "f.nid > 0";
        $sqlsnip2arr[] = "f.tid > 0";
      }
      if (getlocations_access_user_location()) {
        $sqlsnip2arr[] = "f.uid > 0";
      }
      if (user_access('access comments') && user_access('access getlocations')) {
        $sqlsnip2arr[] = "f.cid > 0";
      }
      if (! empty($sqlsnip2arr)) {
        $sqlsnip2 = "AND (" . implode(" OR ", $sqlsnip2arr) . ") ";
      }
      else {
        // this user may not see anything
        $sqlsnip2 = "AND 1=0 ";
      }
    }

    if ($dosort) {
      $sort = getlocations_earth_distance_sql($lat, $lon, 'g');
      $fields[] = "$sort AS distance_sort ";
    }

    $selects = implode(",", $fields);

    $sql = "SELECT $selects ";
    $sql .= "FROM {getlocations_fields} g LEFT JOIN {getlocations_fields_entities} f ON g.glid = f.glid ";
    $sql .= $sqlsnip1;
    $sql .= "WHERE ($where) ";
    $sql .= "AND g.glid IS NOT NULL ";
    $sql .= "AND g.latitude != '0' ";
    $sql .= "AND g.longitude != '0' ";
    $sql .= $sqlsnip2;
    if ($dosort) {
      $sql .= "ORDER BY distance_sort ASC ";
    }
    if ($limits > 0) {
      $sql .= "LIMIT 0, $limits ";
    }

    $location_ct = 0;
    $result = db_query($sql, $sqlarr);
    foreach ($result AS $row) {
      $locations[$location_ct] = $row;
      if (empty($locations[$location_ct]->marker)) {
        if (! empty($marker)) {
          $locations[$location_ct]->marker = $marker;
          if (isset($locations[$location_ct]->nid) && $locations[$location_ct]->nid > 0) {
            $t = getlocations_get_nodetype($locations[$location_ct]->nid);
            if ($t) {
              $typemarkers = getlocations_get_markertypes('node');
              if (isset($typemarkers[$t]) && $typemarkers[$t]) {
                $locations[$location_ct]->marker = $typemarkers[$t];
              }
            }
          }
        }
        else {
          // must be an 'all' search so we have to figure out a marker
          if ($locations[$location_ct]->nid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
            $t = getlocations_get_nodetype($locations[$location_ct]->nid);
            if ($t) {
              $typemarkers = getlocations_get_markertypes('node');
              if (isset($typemarkers[$t]) && $typemarkers[$t]) {
                $locations[$location_ct]->marker = $typemarkers[$t];
              }
            }

            // term markers
            $locations[$location_ct]->marker = getlocations_get_term_marker($locations[$location_ct]->nid, $locations[$location_ct]->marker);

          }
          elseif ($locations[$location_ct]->uid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['user_map_marker'];
          }
          elseif ($locations[$location_ct]->tid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['vocabulary_map_marker'];
          }
          elseif ($locations[$location_ct]->cid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['comment_map_marker'];
          }
        }
        // just in case
        if (empty($locations[$location_ct]->marker)) {
          $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
        }
      }
      // ensure we always have a title
      if (! isset($locations[$location_ct]->title) || empty($locations[$location_ct]->title)) {
        if ($locations[$location_ct]->nid > 0) {
          $n = node_load($locations[$location_ct]->nid);
          $locations[$location_ct]->title = $n->title;
          // sanity check
          if ($n->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
        elseif ($locations[$location_ct]->uid > 0) {
          $u = user_load($locations[$location_ct]->uid);
          $locations[$location_ct]->title = $u->name;
          // sanity check
          if ($u->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
        elseif ($locations[$location_ct]->tid > 0) {
          $term = taxonomy_term_load($locations[$location_ct]->tid);
          $locations[$location_ct]->title = $term->name;
        }
        elseif ($locations[$location_ct]->cid > 0) {
          $comment = comment_load($locations[$location_ct]->cid);
          $locations[$location_ct]->title = $comment->subject;
          // sanity check
          if ($comment->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
      }
      $location_ct++;
    }
  }

  $minmaxes = $latrange[0] . ',' . $lonrange[0] . ',' . $latrange[1] . ',' . $lonrange[1];
  // format lat/lon
  if ($dms) {
    $latout = theme('getlocations_latitude_dms', array('latitude' => $lat));
    $lonout = theme('getlocations_longitude_dms', array('longitude' => $lon));
  }
  else {
    $latout = round($lat, 6);
    $lonout = round($lon, 6);
  }
  $infoarr = array($distance, $units, ($type ? $type : 'all'), $latout, $lonout, $distance_meters);
  $info = implode(",", $infoarr);
  $ret = array('locations' => $locations, 'minmaxes' => $minmaxes, 'info' => $info);

  return $ret;

}

function getlocations_search_do_types() {
  $return = FALSE;
  if (module_exists('getlocations_fields')) {
    $return = TRUE;
  }
  return $return;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */

function getlocations_search_block_info() {
  $blocks = array();
  $blocks['getlocations_search_block'] = array(
    'info' => t("Getlocations search."),
  );
  return $blocks;

}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */

function getlocations_search_block_view($delta = '') {

  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'getlocations_search_block':
      $block['subject'] = t('Getlocations search');
      $block['content'] = getlocations_search('block');
      break;
  }
  return $block;

}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */

function getlocations_search_block_configure($delta = '') {
  module_load_include('inc', 'getlocations_search', 'getlocations_search.admin');
  $settings = getlocations_search_block_get_var();
  $form = array();
  switch ($delta) {
    case 'getlocations_search_block':
      $getlocations_search_paths = getlocations_search_paths_get();
      backdrop_add_js($getlocations_search_paths['getlocations_search_admin_path']);
      $form = _getlocations_search_settings_form($settings, 'block');
      $form['#theme'] = 'getlocations_search_block_settings_form';
      break;
  }
  return $form;
}


/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */

function getlocations_search_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.

  // $delta contains the block name.
  switch ($delta) {
    case 'getlocations_search_block':
      if (isset($edit['getlocations_search_block_defaults']) ) {
        getlocations_search_block_set_var($edit['getlocations_search_block_defaults']);
      }
    break;
  }
}


/**
 * Load the getlocations_blocks variables array
 *
 * @return array
 */

function getlocations_search_block_get_var() {
  $defaults = getlocations_search_block_defaults();
  return $defaults;
}


/**
 * Save the getlocations_blocks variables array
 *
 * @param array $var
 */

function getlocations_search_block_set_var($var) {

  $config = config('getlocations_search_block.settings');
  $config_settings = $config->get('settings');

  // $var needs to be transformed into the right groups
  $values = array();
  $polygons_group = array("polygons_enable","polygons_strokecolor","polygons_strokeopacity","polygons_strokeweight","polygons_fillcolor","polygons_fillopacity","polygons_coords","polygons_clickable","polygons_message");
  foreach ($polygons_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['polygons_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['polygons_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $rectangles_group = array("rectangles_enable","rectangles_strokecolor","rectangles_strokeopacity","rectangles_strokeweight","rectangles_fillcolor","rectangles_fillopacity","rectangles_coords","rectangles_clickable","rectangles_message","rectangles_apply","rectangles_dist");
  foreach ($rectangles_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['rectangles_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['rectangles_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $circles_group = array("circles_enable","circles_strokecolor","circles_strokeopacity","circles_strokeweight","circles_fillcolor","circles_fillopacity","circles_coords","circles_clickable","circles_message","circles_radius","circles_apply");
  foreach ($circles_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['circles_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['circles_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $polylines_group = array("polylines_enable","polylines_strokecolor","polylines_strokeopacity","polylines_strokeweight","polylines_coords","polylines_clickable","polylines_message");
  foreach ($polylines_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['polylines_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['polylines_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $highlight_group = array("highlight_enable","highlight_strokecolor","highlight_strokeopacity","highlight_strokeweight","highlight_fillcolor","highlight_fillopacity","highlight_radius");
  foreach ($highlight_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['hilight_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['highlight_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $markerclusterer_group = array("markerclusterer_style","markerclusterer_zoom","markerclusterer_size","markerclusterer_minsize","markerclusterer_title","markerclusterer_imgpath");
  foreach ($markerclusterer_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['markerclusterer_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['markerclusterer_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $sv_group = array("sv_show","svcontrolposition");
  foreach ($sv_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['sv_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['sv_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $search_places_group = array("search_places","search_places_size","search_places_position","search_places_label","search_places_placeholder","search_places_dd","search_places_list");
  foreach ($search_places_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['search_places_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['search_places_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $gps_group = array("gps_button","gps_button_label","gps_marker_title","gps_marker","gps_bubble","gps_geocode","gps_center","gps_type","gps_zoom","gps_latlon_path");
  foreach ($gps_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['gps_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['gps_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $smartip_group = array("smartip_button","smartip_button_label","smartip_marker","smartip_marker_title","smartip_bubble","smartip_center","smartip_zoom","smartip_callback");
  foreach ($smartip_group AS $k) {
    if (isset($config_settings[$k]) ) {
      $values['smartip_group'][$k] = $config_settings[$k];
    }
    if (isset($var[$k])) {
      $values['smartip_group'][$k] = $var[$k];
      unset($var[$k]);
    }
  }

  $keys = array_keys($var);
  foreach ($keys AS $k) {
    $values[$k] = $var[$k];
  }

  // just in case
  $values['saved'] = 1;

  $keys = array_keys($values);
  foreach ($keys AS $k) {
    $config->set('settings.' . $k, $values[$k]);
  }
  $config->save();

}



function getlocations_search_block_defaults() {
  $defaults = config_get('getlocations_search_block.settings', 'settings');
  $saved = $defaults['saved'];
  // if this has never been saved use getlocations_defaults settings
  if (! $saved) {
    $getlocations_defaults = getlocations_defaults();
    $keys = array_keys($defaults);
    foreach ($keys AS $key) {
      if (isset($getlocations_defaults[$key])) {
        $defaults[$key] = $getlocations_defaults[$key];
      }
    }
  }
  return $defaults;
}

function getlocations_search_w3w_settings() {

  $mainsettings = config_get('getlocations.settings', 'settings');
  $settings = config_get('getlocations_search.settings', 'settings');
  $config = array();
  $config['what3words_lic'] = $mainsettings['what3words_lic'];
  $config['what3words_group'] = $settings['what3words_group'];
  return $config;
}

function getlocations_search_shapes_settings() {
  $config = config_get('getlocations_search.settings', 'settings');
  $settings = array(
    'polygons_group'   => $config['polygons_group'],
    'rectangles_group' => $config['rectangles_group'],
    'circles_group'    => $config['circles_group'],
    'polylines_group'  => $config['polylines_group'],
  );
  return $settings;
}
